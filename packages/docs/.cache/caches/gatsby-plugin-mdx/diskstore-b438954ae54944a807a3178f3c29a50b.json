{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-20f8a2439e24c092d67be4ed42832810-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Object Styles","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Authoring CSS in JavaScript object literal syntax can be a great way to catch syntax errors before committing code and use other features of JS syntax in styles.\nIf you're not used to writing styles in object literal syntax though, there are a few key differences to using native CSS syntax.","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":5,"column":130,"offset":309},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":5,"column":130,"offset":309},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Camel Case","position":{"start":{"line":7,"column":4,"offset":314},"end":{"line":7,"column":14,"offset":324},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":311},"end":{"line":7,"column":14,"offset":324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All CSS properties should be written in camel case instead of using the hyphenated form.\nFor example, the CSS ","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":10,"column":22,"offset":436},"indent":[1]}},{"type":"inlineCode","value":"background-color","position":{"start":{"line":10,"column":22,"offset":436},"end":{"line":10,"column":40,"offset":454},"indent":[]}},{"type":"text","value":" property should be written as ","position":{"start":{"line":10,"column":40,"offset":454},"end":{"line":10,"column":71,"offset":485},"indent":[]}},{"type":"inlineCode","value":"backgroundColor","position":{"start":{"line":10,"column":71,"offset":485},"end":{"line":10,"column":88,"offset":502},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":88,"offset":502},"end":{"line":10,"column":89,"offset":503},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":10,"column":89,"offset":503},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Values","position":{"start":{"line":12,"column":4,"offset":508},"end":{"line":12,"column":10,"offset":514},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":505},"end":{"line":12,"column":10,"offset":514},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Strings in JS must be surrounded by either a single quote, double quote or backticks (","position":{"start":{"line":14,"column":1,"offset":516},"end":{"line":14,"column":87,"offset":602},"indent":[]}},{"type":"inlineCode","value":"'","position":{"start":{"line":14,"column":87,"offset":602},"end":{"line":14,"column":90,"offset":605},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":14,"column":90,"offset":605},"end":{"line":14,"column":92,"offset":607},"indent":[]}},{"type":"inlineCode","value":"\"","position":{"start":{"line":14,"column":92,"offset":607},"end":{"line":14,"column":95,"offset":610},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":14,"column":95,"offset":610},"end":{"line":14,"column":97,"offset":612},"indent":[]}},{"type":"jsx","value":"<inlineCode>","position":{"start":{"line":14,"column":97,"offset":612},"end":{"line":14,"column":109,"offset":624},"indent":[]}},{"type":"text","value":"`","position":{"start":{"line":14,"column":109,"offset":624},"end":{"line":14,"column":110,"offset":625},"indent":[]}},{"type":"jsx","value":"</inlineCode>","position":{"start":{"line":14,"column":110,"offset":625},"end":{"line":14,"column":123,"offset":638},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":14,"column":123,"offset":638},"end":{"line":14,"column":125,"offset":640},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":516},"end":{"line":14,"column":125,"offset":640},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  backgroundColor: 'tomato',\n}","position":{"start":{"line":16,"column":1,"offset":642},"end":{"line":20,"column":4,"offset":684},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Numbers","position":{"start":{"line":22,"column":4,"offset":689},"end":{"line":22,"column":11,"offset":696},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":686},"end":{"line":22,"column":11,"offset":696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Numbers should be written without quotes to use the native JS number type.\nNumbers will generally be converted to pixel values by Emotion.","position":{"start":{"line":24,"column":1,"offset":698},"end":{"line":25,"column":64,"offset":836},"indent":[1]}}],"position":{"start":{"line":24,"column":1,"offset":698},"end":{"line":25,"column":64,"offset":836},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"{\n  fontSize: 32,\n}","position":{"start":{"line":27,"column":1,"offset":838},"end":{"line":31,"column":4,"offset":867},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This also means that you can use JS math expressions to derive values.","position":{"start":{"line":33,"column":1,"offset":869},"end":{"line":33,"column":71,"offset":939},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":869},"end":{"line":33,"column":71,"offset":939},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  width: (100 / 3) + '%',\n}","position":{"start":{"line":35,"column":1,"offset":941},"end":{"line":39,"column":4,"offset":980},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To use other CSS units, use strings as values instead.","position":{"start":{"line":41,"column":1,"offset":982},"end":{"line":41,"column":55,"offset":1036},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":982},"end":{"line":41,"column":55,"offset":1036},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  fontSize: '2em',\n}","position":{"start":{"line":43,"column":1,"offset":1038},"end":{"line":47,"column":4,"offset":1070},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Commas","position":{"start":{"line":49,"column":4,"offset":1075},"end":{"line":49,"column":10,"offset":1081},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1072},"end":{"line":49,"column":10,"offset":1081},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All properties should be separated by commas, not semicolons.","position":{"start":{"line":51,"column":1,"offset":1083},"end":{"line":51,"column":62,"offset":1144},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1083},"end":{"line":51,"column":62,"offset":1144},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  fontSize: 32,\n  backgroundColor: 'tomato',\n}","position":{"start":{"line":53,"column":1,"offset":1146},"end":{"line":58,"column":4,"offset":1204},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pseudo Elements","position":{"start":{"line":60,"column":4,"offset":1209},"end":{"line":60,"column":19,"offset":1224},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1206},"end":{"line":60,"column":19,"offset":1224},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use the ","position":{"start":{"line":62,"column":1,"offset":1226},"end":{"line":62,"column":12,"offset":1237},"indent":[]}},{"type":"inlineCode","value":"content","position":{"start":{"line":62,"column":12,"offset":1237},"end":{"line":62,"column":21,"offset":1246},"indent":[]}},{"type":"text","value":" property in a pseudo-element with ","position":{"start":{"line":62,"column":21,"offset":1246},"end":{"line":62,"column":56,"offset":1281},"indent":[]}},{"type":"inlineCode","value":"::before","position":{"start":{"line":62,"column":56,"offset":1281},"end":{"line":62,"column":66,"offset":1291},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":62,"column":66,"offset":1291},"end":{"line":62,"column":70,"offset":1295},"indent":[]}},{"type":"inlineCode","value":"::after","position":{"start":{"line":62,"column":70,"offset":1295},"end":{"line":62,"column":79,"offset":1304},"indent":[]}},{"type":"text","value":", be sure to wrap the string value with quotes in order for it to be parsed correctly as CSS.","position":{"start":{"line":62,"column":79,"offset":1304},"end":{"line":62,"column":172,"offset":1397},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1226},"end":{"line":62,"column":172,"offset":1397},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{\n  \"::before\": {\n    content: '\"\"',\n    display: 'block',\n    width: 32,\n    height: 32,\n    backgroundColor: 'tomato',\n  }\n}","position":{"start":{"line":64,"column":1,"offset":1399},"end":{"line":74,"column":4,"offset":1535},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For more on using objects in JS, see ","position":{"start":{"line":76,"column":1,"offset":1537},"end":{"line":76,"column":38,"offset":1574},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects","children":[{"type":"text","value":"MDN's guide on Working with Objects","position":{"start":{"line":76,"column":39,"offset":1575},"end":{"line":76,"column":74,"offset":1610},"indent":[]}}],"position":{"start":{"line":76,"column":38,"offset":1574},"end":{"line":76,"column":159,"offset":1695},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":76,"column":159,"offset":1695},"end":{"line":76,"column":160,"offset":1696},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1537},"end":{"line":76,"column":160,"offset":1696},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Object Styles\"}","position":{"start":{"line":79,"column":1,"offset":1699},"end":{"line":79,"column":54,"offset":1752},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":79,"column":54,"offset":1752}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Object Styles\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"object-styles\"\n    }}>{`Object Styles`}</h1>\n    <p>{`Authoring CSS in JavaScript object literal syntax can be a great way to catch syntax errors before committing code and use other features of JS syntax in styles.\nIf you're not used to writing styles in object literal syntax though, there are a few key differences to using native CSS syntax.`}</p>\n    <h2 {...{\n      \"id\": \"camel-case\"\n    }}>{`Camel Case`}</h2>\n    <p>{`All CSS properties should be written in camel case instead of using the hyphenated form.\nFor example, the CSS `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{` property should be written as `}<inlineCode parentName=\"p\">{`backgroundColor`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h2>\n    <p>{`Strings in JS must be surrounded by either a single quote, double quote or backticks (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`\"`}</inlineCode>{`, `}<inlineCode>{`\\``}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  backgroundColor: 'tomato',\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbers\"\n    }}>{`Numbers`}</h2>\n    <p>{`Numbers should be written without quotes to use the native JS number type.\nNumbers will generally be converted to pixel values by Emotion.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  fontSize: 32,\n}\n`}</code></pre>\n    <p>{`This also means that you can use JS math expressions to derive values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  width: (100 / 3) + '%',\n}\n`}</code></pre>\n    <p>{`To use other CSS units, use strings as values instead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  fontSize: '2em',\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"commas\"\n    }}>{`Commas`}</h2>\n    <p>{`All properties should be separated by commas, not semicolons.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  fontSize: 32,\n  backgroundColor: 'tomato',\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pseudo-elements\"\n    }}>{`Pseudo Elements`}</h2>\n    <p>{`To use the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` property in a pseudo-element with `}<inlineCode parentName=\"p\">{`::before`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`::after`}</inlineCode>{`, be sure to wrap the string value with quotes in order for it to be parsed correctly as CSS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  \"::before\": {\n    content: '\"\"',\n    display: 'block',\n    width: 32,\n    height: 32,\n    backgroundColor: 'tomato',\n  }\n}\n`}</code></pre>\n    <p>{`For more on using objects in JS, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\"\n      }}>{`MDN's guide on Working with Objects`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}