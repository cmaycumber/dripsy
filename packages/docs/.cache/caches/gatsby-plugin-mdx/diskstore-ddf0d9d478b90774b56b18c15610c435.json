{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-2e76aa2464330d183a04f1197ed59bd8-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Nested Theme Providers","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":25,"offset":25},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":25,"offset":25},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While in most cases, you'll be using a ","position":{"start":{"line":4,"column":1,"offset":27},"end":{"line":4,"column":40,"offset":66},"indent":[]}},{"type":"inlineCode","value":"ThemeProvider","position":{"start":{"line":4,"column":40,"offset":66},"end":{"line":4,"column":55,"offset":81},"indent":[]}},{"type":"text","value":" component at the root of your application to set a site-wide theme,\nnested Theme Providers are a powerful way to adjust styles contextually.","position":{"start":{"line":4,"column":55,"offset":81},"end":{"line":5,"column":73,"offset":222},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":27},"end":{"line":5,"column":73,"offset":222},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For example, when building a Gatsby theme, you may want to set some base thematic values\nthat the user can easily override to match their site,\nbut keep some theme-specific styles for use only in the pages that your Gatsby theme generates.\nOr, you might want to have a global theme, but adjust styles in a small section of a page to render with a dark color scheme.","position":{"start":{"line":7,"column":1,"offset":224},"end":{"line":10,"column":126,"offset":589},"indent":[1,1,1]}}],"position":{"start":{"line":7,"column":1,"offset":224},"end":{"line":10,"column":126,"offset":589},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How contexts merge","position":{"start":{"line":12,"column":4,"offset":594},"end":{"line":12,"column":22,"offset":612},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":591},"end":{"line":12,"column":22,"offset":612},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When adding a nested Theme Provider, it will inherit the ","position":{"start":{"line":14,"column":1,"offset":614},"end":{"line":14,"column":58,"offset":671},"indent":[]}},{"type":"inlineCode","value":"theme","position":{"start":{"line":14,"column":58,"offset":671},"end":{"line":14,"column":65,"offset":678},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":14,"column":65,"offset":678},"end":{"line":14,"column":70,"offset":683},"indent":[]}},{"type":"inlineCode","value":"components","position":{"start":{"line":14,"column":70,"offset":683},"end":{"line":14,"column":82,"offset":695},"indent":[]}},{"type":"text","value":" object from its parent.\nThe ","position":{"start":{"line":14,"column":82,"offset":695},"end":{"line":15,"column":5,"offset":724},"indent":[1]}},{"type":"inlineCode","value":"theme","position":{"start":{"line":15,"column":5,"offset":724},"end":{"line":15,"column":12,"offset":731},"indent":[]}},{"type":"text","value":" object will be deeply merged with the outer context's theme.\nThe ","position":{"start":{"line":15,"column":12,"offset":731},"end":{"line":16,"column":5,"offset":797},"indent":[1]}},{"type":"inlineCode","value":"components","position":{"start":{"line":16,"column":5,"offset":797},"end":{"line":16,"column":17,"offset":809},"indent":[]}},{"type":"text","value":" object will override any outer context components, but apply styling based on ","position":{"start":{"line":16,"column":17,"offset":809},"end":{"line":16,"column":96,"offset":888},"indent":[]}},{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":16,"column":96,"offset":888},"end":{"line":16,"column":110,"offset":902},"indent":[]}},{"type":"text","value":".\nThe inner Theme Provider will not create a new color mode state, but inherit this from the parent.","position":{"start":{"line":16,"column":110,"offset":902},"end":{"line":17,"column":99,"offset":1002},"indent":[1]}}],"position":{"start":{"line":14,"column":1,"offset":614},"end":{"line":17,"column":99,"offset":1002},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functional Themes","position":{"start":{"line":19,"column":4,"offset":1007},"end":{"line":19,"column":21,"offset":1024},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1004},"end":{"line":19,"column":21,"offset":1024},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The nested ","position":{"start":{"line":21,"column":1,"offset":1026},"end":{"line":21,"column":12,"offset":1037},"indent":[]}},{"type":"inlineCode","value":"ThemeProvider","position":{"start":{"line":21,"column":12,"offset":1037},"end":{"line":21,"column":27,"offset":1052},"indent":[]}},{"type":"text","value":" component can use a functional theme to avoid deep merging the objects or to control the way the two objects are merged in a more granular way.","position":{"start":{"line":21,"column":27,"offset":1052},"end":{"line":21,"column":171,"offset":1196},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1026},"end":{"line":21,"column":171,"offset":1196},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Gatsby themes","position":{"start":{"line":23,"column":4,"offset":1201},"end":{"line":23,"column":17,"offset":1214},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1198},"end":{"line":23,"column":17,"offset":1214},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When building a Gatsby theme, you should use ","position":{"start":{"line":25,"column":1,"offset":1216},"end":{"line":25,"column":46,"offset":1261},"indent":[]}},{"type":"link","title":null,"url":"/packages/gatsby-plugin","children":[{"type":"inlineCode","value":"gatsby-plugin-theme-ui","position":{"start":{"line":25,"column":47,"offset":1262},"end":{"line":25,"column":71,"offset":1286},"indent":[]}}],"position":{"start":{"line":25,"column":46,"offset":1261},"end":{"line":25,"column":97,"offset":1312},"indent":[]}},{"type":"text","value":" for parts of your theme that should be overridden or merged with other themes.\nIf you need to specify a Gatsby theme-specific subtheme, use a nested Theme Provider in a layout component that only renders around pages that you control.\nThis allows the end user to change their site-level theme without affecting custom styles you might need in your theme.\nThe end user can still shadow any components in your theme if they need to.","position":{"start":{"line":25,"column":97,"offset":1312},"end":{"line":28,"column":76,"offset":1743},"indent":[1,1,1]}}],"position":{"start":{"line":25,"column":1,"offset":1216},"end":{"line":28,"column":76,"offset":1743},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Nested Theme Providers\"}","position":{"start":{"line":31,"column":1,"offset":1746},"end":{"line":31,"column":63,"offset":1808},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":31,"column":63,"offset":1808}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Nested Theme Providers\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"nested-theme-providers\"\n    }}>{`Nested Theme Providers`}</h1>\n    <p>{`While in most cases, you'll be using a `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` component at the root of your application to set a site-wide theme,\nnested Theme Providers are a powerful way to adjust styles contextually.`}</p>\n    <p>{`For example, when building a Gatsby theme, you may want to set some base thematic values\nthat the user can easily override to match their site,\nbut keep some theme-specific styles for use only in the pages that your Gatsby theme generates.\nOr, you might want to have a global theme, but adjust styles in a small section of a page to render with a dark color scheme.`}</p>\n    <h2 {...{\n      \"id\": \"how-contexts-merge\"\n    }}>{`How contexts merge`}</h2>\n    <p>{`When adding a nested Theme Provider, it will inherit the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` object from its parent.\nThe `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` object will be deeply merged with the outer context's theme.\nThe `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` object will override any outer context components, but apply styling based on `}<inlineCode parentName=\"p\">{`theme.styles`}</inlineCode>{`.\nThe inner Theme Provider will not create a new color mode state, but inherit this from the parent.`}</p>\n    <h2 {...{\n      \"id\": \"functional-themes\"\n    }}>{`Functional Themes`}</h2>\n    <p>{`The nested `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` component can use a functional theme to avoid deep merging the objects or to control the way the two objects are merged in a more granular way.`}</p>\n    <h2 {...{\n      \"id\": \"gatsby-themes\"\n    }}>{`Gatsby themes`}</h2>\n    <p>{`When building a Gatsby theme, you should use `}<a parentName=\"p\" {...{\n        \"href\": \"/packages/gatsby-plugin\"\n      }}><inlineCode parentName=\"a\">{`gatsby-plugin-theme-ui`}</inlineCode></a>{` for parts of your theme that should be overridden or merged with other themes.\nIf you need to specify a Gatsby theme-specific subtheme, use a nested Theme Provider in a layout component that only renders around pages that you control.\nThis allows the end user to change their site-level theme without affecting custom styles you might need in your theme.\nThe end user can still shadow any components in your theme if they need to.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}