{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-f7be6f5af0acebe02c3771f4f25c0302-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"JSX Pragma","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Theme UI uses a custom create element function and JSX pragma comments to allow you to style elements with values from your theme using the ","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":141,"offset":155},"indent":[]}},{"type":"linkReference","identifier":"`sx` prop","label":"`sx` prop","referenceType":"collapsed","children":[{"type":"inlineCode","value":"sx","position":{"start":{"line":4,"column":142,"offset":156},"end":{"line":4,"column":146,"offset":160},"indent":[]}},{"type":"text","value":" prop","position":{"start":{"line":4,"column":146,"offset":160},"end":{"line":4,"column":151,"offset":165},"indent":[]}}],"position":{"start":{"line":4,"column":141,"offset":155},"end":{"line":4,"column":154,"offset":168},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":154,"offset":168},"end":{"line":4,"column":155,"offset":169},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":155,"offset":169},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What is JSX","position":{"start":{"line":6,"column":4,"offset":174},"end":{"line":6,"column":15,"offset":185},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":171},"end":{"line":6,"column":15,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"JSX is an XML-like syntax extension to JavaScript.\nIt's a syntax sugar usually used for React's ","position":{"start":{"line":8,"column":1,"offset":187},"end":{"line":9,"column":46,"offset":283},"indent":[1]}},{"type":"inlineCode","value":"createElement","position":{"start":{"line":9,"column":46,"offset":283},"end":{"line":9,"column":61,"offset":298},"indent":[]}},{"type":"text","value":" function.\nYou don't need to write JSX to use React, but it's meant to make code more readable, especially for tree structures with attributes.","position":{"start":{"line":9,"column":61,"offset":298},"end":{"line":10,"column":133,"offset":441},"indent":[1]}}],"position":{"start":{"line":8,"column":1,"offset":187},"end":{"line":10,"column":133,"offset":441},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Given the following JSX:","position":{"start":{"line":12,"column":1,"offset":443},"end":{"line":12,"column":25,"offset":467},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":443},"end":{"line":12,"column":25,"offset":467},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"// example JSX\n<div>\n  <Button onClick={handleClick}>Hello</Button>\n</div>","position":{"start":{"line":14,"column":1,"offset":469},"end":{"line":19,"column":4,"offset":554},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above JSX syntax compiles to the following:","position":{"start":{"line":21,"column":1,"offset":556},"end":{"line":21,"column":48,"offset":603},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":556},"end":{"line":21,"column":48,"offset":603},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"React.createElement(\n  'div',\n  null,\n  React.createElement(\n    Button,\n    {\n      onClick: handleClick,\n    },\n    'Hello'\n  )\n)","position":{"start":{"line":23,"column":1,"offset":605},"end":{"line":35,"column":4,"offset":746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Most apps use Babel to compile JSX syntax for use with React or other similar libraries.\nJSX can be compiled to ","position":{"start":{"line":37,"column":1,"offset":748},"end":{"line":38,"column":24,"offset":860},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"any","position":{"start":{"line":38,"column":25,"offset":861},"end":{"line":38,"column":28,"offset":864},"indent":[]}}],"position":{"start":{"line":38,"column":24,"offset":860},"end":{"line":38,"column":29,"offset":865},"indent":[]}},{"type":"text","value":" function call. By default the Babel plugin will convert JSX into ","position":{"start":{"line":38,"column":29,"offset":865},"end":{"line":38,"column":95,"offset":931},"indent":[]}},{"type":"inlineCode","value":"React.createElement","position":{"start":{"line":38,"column":95,"offset":931},"end":{"line":38,"column":116,"offset":952},"indent":[]}},{"type":"text","value":", but libraries like Preact, MDX, Emotion, and Vuejs use custom create elements functions with JSX.","position":{"start":{"line":38,"column":116,"offset":952},"end":{"line":38,"column":215,"offset":1051},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":748},"end":{"line":38,"column":215,"offset":1051},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"To change the underlying create element function, you can either add an option to the Babel plugin or you can set a ","position":{"start":{"line":40,"column":1,"offset":1053},"end":{"line":40,"column":117,"offset":1169},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"pragma comment","position":{"start":{"line":40,"column":118,"offset":1170},"end":{"line":40,"column":132,"offset":1184},"indent":[]}}],"position":{"start":{"line":40,"column":117,"offset":1169},"end":{"line":40,"column":133,"offset":1185},"indent":[]}},{"type":"text","value":" at the beginning of a module.\nChanging the function in the Babel plugin will transform all JSX in an application into the same function.\nUsing a pragma comment limits the change to only the modules that it's added to.\nThis lets you default to the ","position":{"start":{"line":40,"column":133,"offset":1185},"end":{"line":43,"column":30,"offset":1433},"indent":[1,1,1]}},{"type":"inlineCode","value":"React.createElement","position":{"start":{"line":43,"column":30,"offset":1433},"end":{"line":43,"column":51,"offset":1454},"indent":[]}},{"type":"text","value":" function in most places and use the custom function only where you need it,\ngiving the author more control over where it's used.","position":{"start":{"line":43,"column":51,"offset":1454},"end":{"line":44,"column":53,"offset":1583},"indent":[1]}}],"position":{"start":{"line":40,"column":1,"offset":1053},"end":{"line":44,"column":53,"offset":1583},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Theme UI uses a custom create element function to add the ","position":{"start":{"line":46,"column":1,"offset":1585},"end":{"line":46,"column":59,"offset":1643},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":46,"column":59,"offset":1643},"end":{"line":46,"column":63,"offset":1647},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":46,"column":63,"offset":1647},"end":{"line":46,"column":68,"offset":1652},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":46,"column":68,"offset":1652},"end":{"line":46,"column":73,"offset":1657},"indent":[]}},{"type":"text","value":" props in React.\nThe preferred way of using this function is by adding the custom pragma comment to the top of your file and importing the ","position":{"start":{"line":46,"column":73,"offset":1657},"end":{"line":47,"column":123,"offset":1796},"indent":[1]}},{"type":"inlineCode","value":"jsx","position":{"start":{"line":47,"column":123,"offset":1796},"end":{"line":47,"column":128,"offset":1801},"indent":[]}},{"type":"text","value":" function from Theme UI.","position":{"start":{"line":47,"column":128,"offset":1801},"end":{"line":47,"column":152,"offset":1825},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1585},"end":{"line":47,"column":152,"offset":1825},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"/** @jsx jsx */\nimport { jsx } from 'theme-ui'","position":{"start":{"line":49,"column":1,"offset":1827},"end":{"line":52,"column":4,"offset":1884},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"See the ","position":{"start":{"line":54,"column":1,"offset":1886},"end":{"line":54,"column":9,"offset":1894},"indent":[]}},{"type":"linkReference","identifier":"`sx` prop","label":"`sx` prop","referenceType":"collapsed","children":[{"type":"inlineCode","value":"sx","position":{"start":{"line":54,"column":10,"offset":1895},"end":{"line":54,"column":14,"offset":1899},"indent":[]}},{"type":"text","value":" prop","position":{"start":{"line":54,"column":14,"offset":1899},"end":{"line":54,"column":19,"offset":1904},"indent":[]}}],"position":{"start":{"line":54,"column":9,"offset":1894},"end":{"line":54,"column":22,"offset":1907},"indent":[]}},{"type":"text","value":" docs to learn more.","position":{"start":{"line":54,"column":22,"offset":1907},"end":{"line":54,"column":42,"offset":1927},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1886},"end":{"line":54,"column":42,"offset":1927},"indent":[]}},{"type":"definition","identifier":"`sx` prop","label":"`sx` prop","title":null,"url":"/sx-prop","position":{"start":{"line":56,"column":1,"offset":1929},"end":{"line":56,"column":22,"offset":1950},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JSX Pragma\"}","position":{"start":{"line":59,"column":1,"offset":1953},"end":{"line":59,"column":51,"offset":2003},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":51,"offset":2003}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JSX Pragma\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"jsx-pragma\"\n    }}>{`JSX Pragma`}</h1>\n    <p>{`Theme UI uses a custom create element function and JSX pragma comments to allow you to style elements with values from your theme using the `}<a parentName=\"p\" {...{\n        \"href\": \"/sx-prop\"\n      }}><inlineCode parentName=\"a\">{`sx`}</inlineCode>{` prop`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"what-is-jsx\"\n    }}>{`What is JSX`}</h2>\n    <p>{`JSX is an XML-like syntax extension to JavaScript.\nIt's a syntax sugar usually used for React's `}<inlineCode parentName=\"p\">{`createElement`}</inlineCode>{` function.\nYou don't need to write JSX to use React, but it's meant to make code more readable, especially for tree structures with attributes.`}</p>\n    <p>{`Given the following JSX:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// example JSX\n<div>\n  <Button onClick={handleClick}>Hello</Button>\n</div>\n`}</code></pre>\n    <p>{`The above JSX syntax compiles to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`React.createElement(\n  'div',\n  null,\n  React.createElement(\n    Button,\n    {\n      onClick: handleClick,\n    },\n    'Hello'\n  )\n)\n`}</code></pre>\n    <p>{`Most apps use Babel to compile JSX syntax for use with React or other similar libraries.\nJSX can be compiled to `}<em parentName=\"p\">{`any`}</em>{` function call. By default the Babel plugin will convert JSX into `}<inlineCode parentName=\"p\">{`React.createElement`}</inlineCode>{`, but libraries like Preact, MDX, Emotion, and Vuejs use custom create elements functions with JSX.`}</p>\n    <p>{`To change the underlying create element function, you can either add an option to the Babel plugin or you can set a `}<em parentName=\"p\">{`pragma comment`}</em>{` at the beginning of a module.\nChanging the function in the Babel plugin will transform all JSX in an application into the same function.\nUsing a pragma comment limits the change to only the modules that it's added to.\nThis lets you default to the `}<inlineCode parentName=\"p\">{`React.createElement`}</inlineCode>{` function in most places and use the custom function only where you need it,\ngiving the author more control over where it's used.`}</p>\n    <p>{`Theme UI uses a custom create element function to add the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` props in React.\nThe preferred way of using this function is by adding the custom pragma comment to the top of your file and importing the `}<inlineCode parentName=\"p\">{`jsx`}</inlineCode>{` function from Theme UI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"/sx-prop\"\n      }}><inlineCode parentName=\"a\">{`sx`}</inlineCode>{` prop`}</a>{` docs to learn more.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}