{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-704b9451a4577097ce468e4f861dfa46-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Merging Themes","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":17,"offset":17},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sometimes it's useful to split a theme across multiple files, use a preset as the basis for a custom theme, or combine two or more themes together.\nSince themes are plain JavaScript objects, any merging strategy will work.\nThis guide shows a few common ways to merge themes together.","position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":6,"column":61,"offset":302},"indent":[1,1]}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":6,"column":61,"offset":302},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using a preset","position":{"start":{"line":8,"column":4,"offset":307},"end":{"line":8,"column":18,"offset":321},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":304},"end":{"line":8,"column":18,"offset":321},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use a preset as the basis for a custom theme, it's recommended that you use a deep merge utility.\nThe ","position":{"start":{"line":10,"column":1,"offset":323},"end":{"line":11,"column":5,"offset":428},"indent":[1]}},{"type":"inlineCode","value":"theme-ui","position":{"start":{"line":11,"column":5,"offset":428},"end":{"line":11,"column":15,"offset":438},"indent":[]}},{"type":"text","value":" package exports a preconfigured version of the ","position":{"start":{"line":11,"column":15,"offset":438},"end":{"line":11,"column":63,"offset":486},"indent":[]}},{"type":"inlineCode","value":"deepmerge","position":{"start":{"line":11,"column":63,"offset":486},"end":{"line":11,"column":74,"offset":497},"indent":[]}},{"type":"text","value":" package that can be used for this.","position":{"start":{"line":11,"column":74,"offset":497},"end":{"line":11,"column":109,"offset":532},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":323},"end":{"line":11,"column":109,"offset":532},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"// example theme based on preset-future\nimport future from '@theme-ui/preset-future'\nimport { merge } from 'theme-ui'\n\nexport default merge(future, {\n  fonts: {\n    body: 'Montserrat, sans-serif',\n  },\n})","position":{"start":{"line":14,"column":1,"offset":535},"end":{"line":24,"column":4,"offset":749},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multiple files","position":{"start":{"line":26,"column":4,"offset":754},"end":{"line":26,"column":18,"offset":768},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":751},"end":{"line":26,"column":18,"offset":768},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While there is absolutely nothing wrong with keeping an entire theme in a single file, you can split a theme into multiple files (or modules).","position":{"start":{"line":28,"column":1,"offset":770},"end":{"line":28,"column":143,"offset":912},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":770},"end":{"line":28,"column":143,"offset":912},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// example theme/colors.js\nexport default {\n  text: '#000',\n  background: '#fff',\n  primary: '#07c',\n}","position":{"start":{"line":30,"column":1,"offset":914},"end":{"line":37,"column":4,"offset":1026},"indent":[1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"// example theme/fonts.js\nexport default {\n  body: 'system-ui, sans-serif',\n  heading: 'Baskerville, Georgia, serif',\n  monospace: 'Menlo, monospace',\n}","position":{"start":{"line":39,"column":1,"offset":1028},"end":{"line":46,"column":4,"offset":1190},"indent":[1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"// example theme/index.js\nimport colors from './colors'\nimport fonts from './fonts'\n\nexport default {\n  colors,\n  fonts,\n}","position":{"start":{"line":48,"column":1,"offset":1192},"end":{"line":57,"column":4,"offset":1324},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Merging Themes\"}","position":{"start":{"line":62,"column":1,"offset":1329},"end":{"line":62,"column":55,"offset":1383},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":62,"column":55,"offset":1383}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Merging Themes\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"merging-themes\"\n    }}>{`Merging Themes`}</h1>\n    <p>{`Sometimes it's useful to split a theme across multiple files, use a preset as the basis for a custom theme, or combine two or more themes together.\nSince themes are plain JavaScript objects, any merging strategy will work.\nThis guide shows a few common ways to merge themes together.`}</p>\n    <h2 {...{\n      \"id\": \"using-a-preset\"\n    }}>{`Using a preset`}</h2>\n    <p>{`To use a preset as the basis for a custom theme, it's recommended that you use a deep merge utility.\nThe `}<inlineCode parentName=\"p\">{`theme-ui`}</inlineCode>{` package exports a preconfigured version of the `}<inlineCode parentName=\"p\">{`deepmerge`}</inlineCode>{` package that can be used for this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme based on preset-future\nimport future from '@theme-ui/preset-future'\nimport { merge } from 'theme-ui'\n\nexport default merge(future, {\n  fonts: {\n    body: 'Montserrat, sans-serif',\n  },\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multiple-files\"\n    }}>{`Multiple files`}</h2>\n    <p>{`While there is absolutely nothing wrong with keeping an entire theme in a single file, you can split a theme into multiple files (or modules).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme/colors.js\nexport default {\n  text: '#000',\n  background: '#fff',\n  primary: '#07c',\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme/fonts.js\nexport default {\n  body: 'system-ui, sans-serif',\n  heading: 'Baskerville, Georgia, serif',\n  monospace: 'Menlo, monospace',\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme/index.js\nimport colors from './colors'\nimport fonts from './fonts'\n\nexport default {\n  colors,\n  fonts,\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}