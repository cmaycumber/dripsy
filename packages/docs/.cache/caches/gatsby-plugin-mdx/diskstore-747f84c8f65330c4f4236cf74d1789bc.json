{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-fd11e31711b1a7b8fcac0b13261c3a7f-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Custom CacheProvider","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":23,"offset":23},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":23,"offset":23},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Style container","position":{"start":{"line":4,"column":4,"offset":28},"end":{"line":4,"column":19,"offset":43},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":19,"offset":43},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You may come across a situation where you want to inject the generated styles into a\ndifferent element than the current document head (an iframe perhaps).","position":{"start":{"line":6,"column":1,"offset":45},"end":{"line":7,"column":70,"offset":199},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":45},"end":{"line":7,"column":70,"offset":199},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"By using the CacheProvider from ","position":{"start":{"line":9,"column":1,"offset":201},"end":{"line":9,"column":33,"offset":233},"indent":[]}},{"type":"inlineCode","value":"@emotion/core","position":{"start":{"line":9,"column":33,"offset":233},"end":{"line":9,"column":48,"offset":248},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":9,"column":48,"offset":248},"end":{"line":9,"column":53,"offset":253},"indent":[]}},{"type":"inlineCode","value":"createCache","position":{"start":{"line":9,"column":53,"offset":253},"end":{"line":9,"column":66,"offset":266},"indent":[]}},{"type":"text","value":" from ","position":{"start":{"line":9,"column":66,"offset":266},"end":{"line":9,"column":72,"offset":272},"indent":[]}},{"type":"inlineCode","value":"@emotion/cache","position":{"start":{"line":9,"column":72,"offset":272},"end":{"line":9,"column":88,"offset":288},"indent":[]}},{"type":"text","value":" you can\nspecify the target container element.","position":{"start":{"line":9,"column":88,"offset":288},"end":{"line":10,"column":38,"offset":334},"indent":[1]}}],"position":{"start":{"line":9,"column":1,"offset":201},"end":{"line":10,"column":38,"offset":334},"indent":[1]}},{"type":"code","lang":"jsx","meta":null,"value":"import { ThemeProvider } from 'theme-ui'\nimport { CacheProvider } from '@emotion/core'\nimport createCache from '@emotion/cache'\n\n/**\n * @see https://emotion.sh/docs/@emotion/cache\n */\nconst cache = createCache({\n  container: document.getElementById('my-cool-iframe'),\n})\n\nconst theme = {\n  colors: {\n    text: 'tomato',\n  },\n}\n\nexport default ({ children }) => {\n  return (\n    <CacheProvider value={cache}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </CacheProvider>\n  )\n}","position":{"start":{"line":12,"column":1,"offset":336},"end":{"line":37,"column":4,"offset":843},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"With react-frame-component","position":{"start":{"line":39,"column":5,"offset":849},"end":{"line":39,"column":31,"offset":875},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":845},"end":{"line":39,"column":31,"offset":875},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import { ThemeProvider } from 'theme-ui'\nimport { CacheProvider } from '@emotion/core'\nimport createCache from '@emotion/cache'\nimport Iframe, { FrameContextConsumer } from 'react-frame-component'\n\nconst theme = {\n  colors: {\n    text: 'tomato',\n  },\n}\n\nexport default ({ children }) => {\n  return (\n    <Iframe initialContent=\"IFRAME_CONTENT\">\n      <FrameContextConsumer>\n        {frameContext => {\n          const cache = createCache({\n            container: frameContext.document.head,\n          })\n          return (\n            <CacheProvider value={cache}>\n              <ThemeProvider theme={theme}>{children}</ThemeProvider>\n            </CacheProvider>\n          )\n        }}\n      </FrameContextConsumer>\n    </Iframe>\n  )\n}","position":{"start":{"line":41,"column":1,"offset":877},"end":{"line":71,"column":4,"offset":1623},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Custom CacheProvider\"}","position":{"start":{"line":74,"column":1,"offset":1626},"end":{"line":74,"column":61,"offset":1686},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":61,"offset":1686}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Custom CacheProvider\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"custom-cacheprovider\"\n    }}>{`Custom CacheProvider`}</h1>\n    <h2 {...{\n      \"id\": \"style-container\"\n    }}>{`Style container`}</h2>\n    <p>{`You may come across a situation where you want to inject the generated styles into a\ndifferent element than the current document head (an iframe perhaps).`}</p>\n    <p>{`By using the CacheProvider from `}<inlineCode parentName=\"p\">{`@emotion/core`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`createCache`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`@emotion/cache`}</inlineCode>{` you can\nspecify the target container element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { ThemeProvider } from 'theme-ui'\nimport { CacheProvider } from '@emotion/core'\nimport createCache from '@emotion/cache'\n\n/**\n * @see https://emotion.sh/docs/@emotion/cache\n */\nconst cache = createCache({\n  container: document.getElementById('my-cool-iframe'),\n})\n\nconst theme = {\n  colors: {\n    text: 'tomato',\n  },\n}\n\nexport default ({ children }) => {\n  return (\n    <CacheProvider value={cache}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </CacheProvider>\n  )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-react-frame-component\"\n    }}>{`With react-frame-component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { ThemeProvider } from 'theme-ui'\nimport { CacheProvider } from '@emotion/core'\nimport createCache from '@emotion/cache'\nimport Iframe, { FrameContextConsumer } from 'react-frame-component'\n\nconst theme = {\n  colors: {\n    text: 'tomato',\n  },\n}\n\nexport default ({ children }) => {\n  return (\n    <Iframe initialContent=\"IFRAME_CONTENT\">\n      <FrameContextConsumer>\n        {frameContext => {\n          const cache = createCache({\n            container: frameContext.document.head,\n          })\n          return (\n            <CacheProvider value={cache}>\n              <ThemeProvider theme={theme}>{children}</ThemeProvider>\n            </CacheProvider>\n          )\n        }}\n      </FrameContextConsumer>\n    </Iframe>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}