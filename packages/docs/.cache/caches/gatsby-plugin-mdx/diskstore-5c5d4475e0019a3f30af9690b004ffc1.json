{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-d63cf9d48a197ef08ac9caf69a3f8449-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Layouts","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By leveraging the ","position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":19,"offset":30},"indent":[]}},{"type":"link","title":null,"url":"/guides/variants","children":[{"type":"text","value":"variants","position":{"start":{"line":4,"column":20,"offset":31},"end":{"line":4,"column":28,"offset":39},"indent":[]}}],"position":{"start":{"line":4,"column":19,"offset":30},"end":{"line":4,"column":47,"offset":58},"indent":[]}},{"type":"text","value":" feature, you can create custom themeable layout components.\nThe components can include some default styles,\nbut still allow users to override styles such as colors or typography, by changing values in the theme object.","position":{"start":{"line":4,"column":47,"offset":58},"end":{"line":6,"column":111,"offset":277},"indent":[1,1]}}],"position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":6,"column":111,"offset":277},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To start, create a layout component that will wrap pages in your application.\nFeel free to customize the content and default styles however you like.","position":{"start":{"line":8,"column":1,"offset":279},"end":{"line":9,"column":72,"offset":428},"indent":[1]}}],"position":{"start":{"line":8,"column":1,"offset":279},"end":{"line":9,"column":72,"offset":428},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"// example src/layout.js\n/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n\nexport default props =>\n  <div\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n    }}>\n    <header\n      sx={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n      }}>\n      Header content\n    </header>\n    <main\n      sx={{\n        width: '100%',\n        flex: '1 1 auto',\n      }}>\n      <div\n        sx={{\n          maxWidth: 768,\n          mx: 'auto',\n          px: 3,\n        }}>\n        {props.children}\n      </div>\n    </main>\n    <footer\n      sx={{\n        width: '100%',\n      }}>\n      Footer content\n    </footer>\n  </div>","position":{"start":{"line":11,"column":1,"offset":430},"end":{"line":52,"column":4,"offset":1121},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next use the ","position":{"start":{"line":54,"column":1,"offset":1123},"end":{"line":54,"column":14,"offset":1136},"indent":[]}},{"type":"inlineCode","value":"variant","position":{"start":{"line":54,"column":14,"offset":1136},"end":{"line":54,"column":23,"offset":1145},"indent":[]}},{"type":"text","value":" property to name parts of the layout.","position":{"start":{"line":54,"column":23,"offset":1145},"end":{"line":54,"column":61,"offset":1183},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1123},"end":{"line":54,"column":61,"offset":1183},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// example src/layout.js\n/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n\nexport default props =>\n  <div\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      variant: 'layout.root',\n    }}>\n    <header\n      sx={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        variant: 'layout.header',\n      }}>\n      Header content\n    </header>\n    <main\n      sx={{\n        width: '100%',\n        flex: '1 1 auto',\n        variant: 'layout.main',\n      }}>\n      <div\n        sx={{\n          maxWidth: 768,\n          mx: 'auto',\n          px: 3,\n          variant: 'layout.container',\n        }}>\n        {props.children}\n      </div>\n    </main>\n    <footer\n      sx={{\n        width: '100%',\n        variant: 'layout.footer',\n      }}>\n      Footer content\n    </footer>\n  </div>","position":{"start":{"line":56,"column":1,"offset":1185},"end":{"line":102,"column":4,"offset":2045},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":104,"column":1,"offset":2047},"end":{"line":104,"column":5,"offset":2051},"indent":[]}},{"type":"inlineCode","value":"variant","position":{"start":{"line":104,"column":5,"offset":2051},"end":{"line":104,"column":14,"offset":2060},"indent":[]}},{"type":"text","value":" properties above will look for styles in ","position":{"start":{"line":104,"column":14,"offset":2060},"end":{"line":104,"column":56,"offset":2102},"indent":[]}},{"type":"inlineCode","value":"theme.layout","position":{"start":{"line":104,"column":56,"offset":2102},"end":{"line":104,"column":70,"offset":2116},"indent":[]}},{"type":"text","value":".\nIf no styles are defined in the theme, the default styles will remain unchanged.","position":{"start":{"line":104,"column":70,"offset":2116},"end":{"line":105,"column":81,"offset":2198},"indent":[1]}}],"position":{"start":{"line":104,"column":1,"offset":2047},"end":{"line":105,"column":81,"offset":2198},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If a user wants to customize the layout styles, they can add overrides to their theme object.\nFor example, the following will add custom colors to the header and footer.","position":{"start":{"line":107,"column":1,"offset":2200},"end":{"line":108,"column":76,"offset":2369},"indent":[1]}}],"position":{"start":{"line":107,"column":1,"offset":2200},"end":{"line":108,"column":76,"offset":2369},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"// example user theme\nimport colors from './colors'\n\nexport default {\n  colors,\n  layout: {\n    header: {\n      color: 'white',\n      backgroundColor: 'black',\n    },\n    footer: {\n      color: 'white',\n      backgroundColor: 'black',\n    },\n  }\n}","position":{"start":{"line":110,"column":1,"offset":2371},"end":{"line":127,"column":4,"offset":2628},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Layouts\"}","position":{"start":{"line":131,"column":1,"offset":2632},"end":{"line":131,"column":48,"offset":2679},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":131,"column":48,"offset":2679}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Layouts\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"layouts\"\n    }}>{`Layouts`}</h1>\n    <p>{`By leveraging the `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/variants\"\n      }}>{`variants`}</a>{` feature, you can create custom themeable layout components.\nThe components can include some default styles,\nbut still allow users to override styles such as colors or typography, by changing values in the theme object.`}</p>\n    <p>{`To start, create a layout component that will wrap pages in your application.\nFeel free to customize the content and default styles however you like.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example src/layout.js\n/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n\nexport default props =>\n  <div\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n    }}>\n    <header\n      sx={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n      }}>\n      Header content\n    </header>\n    <main\n      sx={{\n        width: '100%',\n        flex: '1 1 auto',\n      }}>\n      <div\n        sx={{\n          maxWidth: 768,\n          mx: 'auto',\n          px: 3,\n        }}>\n        {props.children}\n      </div>\n    </main>\n    <footer\n      sx={{\n        width: '100%',\n      }}>\n      Footer content\n    </footer>\n  </div>\n`}</code></pre>\n    <p>{`Next use the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` property to name parts of the layout.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example src/layout.js\n/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n\nexport default props =>\n  <div\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      variant: 'layout.root',\n    }}>\n    <header\n      sx={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        variant: 'layout.header',\n      }}>\n      Header content\n    </header>\n    <main\n      sx={{\n        width: '100%',\n        flex: '1 1 auto',\n        variant: 'layout.main',\n      }}>\n      <div\n        sx={{\n          maxWidth: 768,\n          mx: 'auto',\n          px: 3,\n          variant: 'layout.container',\n        }}>\n        {props.children}\n      </div>\n    </main>\n    <footer\n      sx={{\n        width: '100%',\n        variant: 'layout.footer',\n      }}>\n      Footer content\n    </footer>\n  </div>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` properties above will look for styles in `}<inlineCode parentName=\"p\">{`theme.layout`}</inlineCode>{`.\nIf no styles are defined in the theme, the default styles will remain unchanged.`}</p>\n    <p>{`If a user wants to customize the layout styles, they can add overrides to their theme object.\nFor example, the following will add custom colors to the header and footer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example user theme\nimport colors from './colors'\n\nexport default {\n  colors,\n  layout: {\n    header: {\n      color: 'white',\n      backgroundColor: 'black',\n    },\n    footer: {\n      color: 'white',\n      backgroundColor: 'black',\n    },\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}