{"expireTime":9007200854949539000,"key":"gatsby-plugin-mdx-entire-payload-8c544a7f91adca51c4b91853b105367c-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"@theme-ui/match-media","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":24,"offset":23},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":24,"offset":23},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React hooks for referencing theme-ui breakpoints.","position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":50,"offset":74},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":50,"offset":74},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"npm i @theme-ui/match-media","position":{"start":{"line":5,"column":1,"offset":76},"end":{"line":7,"column":4,"offset":113},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage","position":{"start":{"line":9,"column":4,"offset":118},"end":{"line":9,"column":9,"offset":123},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":115},"end":{"line":9,"column":9,"offset":123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This package provides two React hooks ","position":{"start":{"line":11,"column":1,"offset":125},"end":{"line":11,"column":39,"offset":163},"indent":[]}},{"type":"inlineCode","value":"useResponsiveValue","position":{"start":{"line":11,"column":39,"offset":163},"end":{"line":11,"column":59,"offset":183},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":11,"column":59,"offset":183},"end":{"line":11,"column":64,"offset":188},"indent":[]}},{"type":"inlineCode","value":"useBreakpointIndex","position":{"start":{"line":11,"column":64,"offset":188},"end":{"line":11,"column":84,"offset":208},"indent":[]}},{"type":"text","value":" for referencing responsive values outside of the ","position":{"start":{"line":11,"column":84,"offset":208},"end":{"line":11,"column":134,"offset":258},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":11,"column":134,"offset":258},"end":{"line":11,"column":138,"offset":262},"indent":[]}},{"type":"text","value":" prop.\nNote that this is a client-side-only, JavaScript solution.","position":{"start":{"line":11,"column":138,"offset":262},"end":{"line":12,"column":59,"offset":327},"indent":[1]}}],"position":{"start":{"line":11,"column":1,"offset":125},"end":{"line":12,"column":59,"offset":327},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  // Return literal values:\n  const color = useResponsiveValue(['red', 'green', 'blue'])\n  // Or provide a function to access theme values:\n  const themeColor = useResponsiveValue(theme => [\n    theme.colors.red,\n    theme.colors.green,\n    theme.colors.blue,\n  ])\n  // `useBreakpointIndex` returns the index of the currently matched media query:\n  const index = useBreakpointIndex()\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n    </div>\n  )\n}","position":{"start":{"line":15,"column":1,"offset":330},"end":{"line":36,"column":4,"offset":941},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Server side rendering","position":{"start":{"line":38,"column":5,"offset":947},"end":{"line":38,"column":26,"offset":968},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":943},"end":{"line":38,"column":26,"offset":968},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each hook also accepts an options object, used to set a default breakpoint index when rendering on the server.","position":{"start":{"line":40,"column":1,"offset":970},"end":{"line":40,"column":111,"offset":1080},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":970},"end":{"line":40,"column":111,"offset":1080},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  const color = useResponsiveValue(['red', 'green', 'blue'], {\n    defaultIndex: 1\n  })\n  const index = useBreakpointIndex({ defaultIndex: 0 })\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n   // Gatsby will output:\n   // The current color is: green, and the current index is: 0\n    </div>\n  )\n}","position":{"start":{"line":42,"column":1,"offset":1082},"end":{"line":59,"column":4,"offset":1542},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Each hook uses ","position":{"start":{"line":61,"column":1,"offset":1544},"end":{"line":61,"column":16,"offset":1559},"indent":[]}},{"type":"inlineCode","value":"breakpoints[0]","position":{"start":{"line":61,"column":16,"offset":1559},"end":{"line":61,"column":32,"offset":1575},"indent":[]}},{"type":"text","value":" by default, if not specified.","position":{"start":{"line":61,"column":32,"offset":1575},"end":{"line":61,"column":62,"offset":1605},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1544},"end":{"line":61,"column":62,"offset":1605},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  const color = useResponsiveValue(['red', 'green', 'blue'])\n  const index = useBreakpointIndex()\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n   // Gatsby will output:\n   // The current color is: red, and the current index is: 0\n    </div>\n  )\n}","position":{"start":{"line":63,"column":1,"offset":1607},"end":{"line":78,"column":4,"offset":2019},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":82,"column":1,"offset":2023},"end":{"line":82,"column":31,"offset":2053},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":82,"column":31,"offset":2053}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"theme-uimatch-media\"\n    }}>{`@theme-ui/match-media`}</h1>\n    <p>{`React hooks for referencing theme-ui breakpoints.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i @theme-ui/match-media\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`This package provides two React hooks `}<inlineCode parentName=\"p\">{`useResponsiveValue`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useBreakpointIndex`}</inlineCode>{` for referencing responsive values outside of the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop.\nNote that this is a client-side-only, JavaScript solution.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  // Return literal values:\n  const color = useResponsiveValue(['red', 'green', 'blue'])\n  // Or provide a function to access theme values:\n  const themeColor = useResponsiveValue(theme => [\n    theme.colors.red,\n    theme.colors.green,\n    theme.colors.blue,\n  ])\n  // \\`useBreakpointIndex\\` returns the index of the currently matched media query:\n  const index = useBreakpointIndex()\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n    </div>\n  )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"server-side-rendering\"\n    }}>{`Server side rendering`}</h3>\n    <p>{`Each hook also accepts an options object, used to set a default breakpoint index when rendering on the server.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  const color = useResponsiveValue(['red', 'green', 'blue'], {\n    defaultIndex: 1\n  })\n  const index = useBreakpointIndex({ defaultIndex: 0 })\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n   // Gatsby will output:\n   // The current color is: green, and the current index is: 0\n    </div>\n  )\n}\n`}</code></pre>\n    <p>{`Each hook uses `}<inlineCode parentName=\"p\">{`breakpoints[0]`}</inlineCode>{` by default, if not specified.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useResponsiveValue, useBreakpointIndex } from '@theme-ui/match-media'\n\nconst MyComponent = () => {\n  const color = useResponsiveValue(['red', 'green', 'blue'])\n  const index = useBreakpointIndex()\n\n  return (\n    <div>\n      The current color is: {color}, and the current index is: {index}\n   // Gatsby will output:\n   // The current color is: red, and the current index is: 0\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}