{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-29acb555eb08b789866c2c38b6a7b3d5-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Responsive Typography","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While there are many different approaches to styling responsive typography on the web,\nthe ","position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":5,"column":5,"offset":117},"indent":[1]}},{"type":"linkReference","identifier":"`theme.styles`","label":"`theme.styles`","referenceType":"collapsed","children":[{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":5,"column":6,"offset":118},"end":{"line":5,"column":20,"offset":132},"indent":[]}}],"position":{"start":{"line":5,"column":5,"offset":117},"end":{"line":5,"column":23,"offset":135},"indent":[]}},{"type":"text","value":" API can be used to create rich, responsive typography in MDX documents, with full control over the end result.\nUsed in combination with ","position":{"start":{"line":5,"column":23,"offset":135},"end":{"line":6,"column":26,"offset":272},"indent":[1]}},{"type":"linkReference","identifier":"responsive array values","label":"responsive array values","referenceType":"collapsed","children":[{"type":"text","value":"responsive array values","position":{"start":{"line":6,"column":27,"offset":273},"end":{"line":6,"column":50,"offset":296},"indent":[]}}],"position":{"start":{"line":6,"column":26,"offset":272},"end":{"line":6,"column":53,"offset":299},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":53,"offset":299},"end":{"line":6,"column":58,"offset":304},"indent":[]}},{"type":"linkReference","identifier":"variants","label":"variants","referenceType":"collapsed","children":[{"type":"text","value":"variants","position":{"start":{"line":6,"column":59,"offset":305},"end":{"line":6,"column":67,"offset":313},"indent":[]}}],"position":{"start":{"line":6,"column":58,"offset":304},"end":{"line":6,"column":70,"offset":316},"indent":[]}},{"type":"text","value":", you can create reusable typographic styles that don't pollute the global CSS scope.","position":{"start":{"line":6,"column":70,"offset":316},"end":{"line":6,"column":155,"offset":401},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":26},"end":{"line":6,"column":155,"offset":401},"indent":[1,1]}},{"type":"definition","identifier":"`theme.styles`","label":"`theme.styles`","title":null,"url":"/theming/#styles","position":{"start":{"line":8,"column":1,"offset":403},"end":{"line":8,"column":35,"offset":437},"indent":[]}},{"type":"definition","identifier":"responsive array values","label":"responsive array values","title":null,"url":"/sx-prop/#responsive-values","position":{"start":{"line":9,"column":1,"offset":438},"end":{"line":9,"column":55,"offset":492},"indent":[]}},{"type":"definition","identifier":"variants","label":"variants","title":null,"url":"/guides/variants","position":{"start":{"line":10,"column":1,"offset":493},"end":{"line":10,"column":29,"offset":521},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// example theme with responsive typography styles\n{\n  fontSizes: [\n    12, 14, 16, 18, 24, 32, 48, 64, 72,\n  ],\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: 'Poppins, sans-serif',\n  },\n  fontWeights: {\n    body: 400,\n    heading: 900,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  text: {\n    heading: {\n      fontFamily: 'heading',\n      fontWeight: 'heading',\n      lineHeight: 'heading',\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    p: {\n      fontSize: [2, 3],\n    },\n    h1: {\n      variant: 'text.heading',\n      fontSize: [5, 6, 7],\n    },\n    h2: {\n      variant: 'text.heading',\n      fontSize: [4, 5],\n    },\n  },\n}","position":{"start":{"line":12,"column":1,"offset":523},"end":{"line":57,"column":4,"offset":1286},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Caveats","position":{"start":{"line":59,"column":4,"offset":1291},"end":{"line":59,"column":11,"offset":1298},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1288},"end":{"line":59,"column":11,"offset":1298},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Due to how CSS specificity works, if you've defined responsive styles in ","position":{"start":{"line":61,"column":1,"offset":1300},"end":{"line":61,"column":74,"offset":1373},"indent":[]}},{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":61,"column":74,"offset":1373},"end":{"line":61,"column":88,"offset":1387},"indent":[]}},{"type":"text","value":",\noverriding styles with the ","position":{"start":{"line":61,"column":88,"offset":1387},"end":{"line":62,"column":28,"offset":1416},"indent":[1]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":62,"column":28,"offset":1416},"end":{"line":62,"column":32,"offset":1420},"indent":[]}},{"type":"text","value":" prop requires also including styles for the ","position":{"start":{"line":62,"column":32,"offset":1420},"end":{"line":62,"column":77,"offset":1465},"indent":[]}},{"type":"linkReference","identifier":"`breakpoints`","label":"`breakpoints`","referenceType":"shortcut","children":[{"type":"inlineCode","value":"breakpoints","position":{"start":{"line":62,"column":78,"offset":1466},"end":{"line":62,"column":91,"offset":1479},"indent":[]}}],"position":{"start":{"line":62,"column":77,"offset":1465},"end":{"line":62,"column":92,"offset":1480},"indent":[]}},{"type":"text","value":" set in the theme.\nFor example, with the following, the ","position":{"start":{"line":62,"column":92,"offset":1480},"end":{"line":63,"column":38,"offset":1536},"indent":[1]}},{"type":"inlineCode","value":"fontSize","position":{"start":{"line":63,"column":38,"offset":1536},"end":{"line":63,"column":48,"offset":1546},"indent":[]}},{"type":"text","value":" style will only apply at the smallest breakpoint, and the ","position":{"start":{"line":63,"column":48,"offset":1546},"end":{"line":63,"column":107,"offset":1605},"indent":[]}},{"type":"inlineCode","value":"theme.styles.h1","position":{"start":{"line":63,"column":107,"offset":1605},"end":{"line":63,"column":124,"offset":1622},"indent":[]}},{"type":"text","value":" responsive styles will apply at other breakpoints.","position":{"start":{"line":63,"column":124,"offset":1622},"end":{"line":63,"column":175,"offset":1673},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1300},"end":{"line":63,"column":175,"offset":1673},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"// example theme\n{\n  styles: {\n    h1: {\n      fontSize: [ 4, 5, 6 ],\n    }\n  }\n}","position":{"start":{"line":65,"column":1,"offset":1675},"end":{"line":74,"column":4,"offset":1766},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"jsx","meta":null,"value":"<Styled.h1\n  sx={{\n    // styles for larger breakpoints will still apply\n    // due to CSS specificity in media queries\n    fontSize: 3,\n  }}\n/>","position":{"start":{"line":76,"column":1,"offset":1768},"end":{"line":84,"column":4,"offset":1923},"indent":[1,1,1,1,1,1,1,1]}},{"type":"definition","identifier":"`breakpoints`","label":"`breakpoints`","title":null,"url":"/theming/#breakpoints","position":{"start":{"line":86,"column":1,"offset":1925},"end":{"line":86,"column":39,"offset":1963},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Non-MDX content","position":{"start":{"line":88,"column":4,"offset":1968},"end":{"line":88,"column":19,"offset":1983},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":1965},"end":{"line":88,"column":19,"offset":1983},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":90,"column":1,"offset":1985},"end":{"line":90,"column":5,"offset":1989},"indent":[]}},{"type":"linkReference","identifier":"`styled`","label":"`Styled`","referenceType":"collapsed","children":[{"type":"inlineCode","value":"Styled","position":{"start":{"line":90,"column":6,"offset":1990},"end":{"line":90,"column":14,"offset":1998},"indent":[]}}],"position":{"start":{"line":90,"column":5,"offset":1989},"end":{"line":90,"column":17,"offset":2001},"indent":[]}},{"type":"text","value":" components can be used to pick up responsive styles outside of MDX,\nbut if you'd like to apply styles to other markdown or user generated content,\nyou can use the ","position":{"start":{"line":90,"column":17,"offset":2001},"end":{"line":92,"column":17,"offset":2165},"indent":[1,1]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":92,"column":17,"offset":2165},"end":{"line":92,"column":21,"offset":2169},"indent":[]}},{"type":"text","value":" prop with a variant to style child elements.\nWhat this does is take the entire ","position":{"start":{"line":92,"column":21,"offset":2169},"end":{"line":93,"column":35,"offset":2249},"indent":[1]}},{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":93,"column":35,"offset":2249},"end":{"line":93,"column":49,"offset":2263},"indent":[]}},{"type":"text","value":" object, adds a scoped classname to the ","position":{"start":{"line":93,"column":49,"offset":2263},"end":{"line":93,"column":89,"offset":2303},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":93,"column":89,"offset":2303},"end":{"line":93,"column":96,"offset":2310},"indent":[]}},{"type":"text","value":",\nand injects CSS with child selectors based on the keys in ","position":{"start":{"line":93,"column":96,"offset":2310},"end":{"line":94,"column":59,"offset":2370},"indent":[1]}},{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":94,"column":59,"offset":2370},"end":{"line":94,"column":73,"offset":2384},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":94,"column":73,"offset":2384},"end":{"line":94,"column":74,"offset":2385},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":1985},"end":{"line":94,"column":74,"offset":2385},"indent":[1,1,1,1]}},{"type":"code","lang":"jsx","meta":null,"value":"export default props => (\n  <div\n    sx={{\n      variant: 'styles',\n    }}>\n    {props.children}\n  </div>\n)","position":{"start":{"line":96,"column":1,"offset":2387},"end":{"line":105,"column":4,"offset":2505},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Optionally, the ","position":{"start":{"line":107,"column":1,"offset":2507},"end":{"line":107,"column":17,"offset":2523},"indent":[]}},{"type":"inlineCode","value":"Styled.root","position":{"start":{"line":107,"column":17,"offset":2523},"end":{"line":107,"column":30,"offset":2536},"indent":[]}},{"type":"text","value":" component can be used to set base styles within the ","position":{"start":{"line":107,"column":30,"offset":2536},"end":{"line":107,"column":83,"offset":2589},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":107,"column":83,"offset":2589},"end":{"line":107,"column":90,"offset":2596},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":107,"column":90,"offset":2596},"end":{"line":107,"column":91,"offset":2597},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2507},"end":{"line":107,"column":91,"offset":2597},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"export default props => (\n  <div\n    sx={{\n      variant: 'styles',\n    }}>\n    <Styled.root>{props.children}</Styled.root>\n  </div>\n)","position":{"start":{"line":109,"column":1,"offset":2599},"end":{"line":118,"column":4,"offset":2744},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"definition","identifier":"`styled`","label":"`styled`","title":null,"url":"/styled","position":{"start":{"line":120,"column":1,"offset":2746},"end":{"line":120,"column":20,"offset":2765},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Responsive Typography\"}","position":{"start":{"line":123,"column":1,"offset":2768},"end":{"line":123,"column":62,"offset":2829},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":123,"column":62,"offset":2829}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Responsive Typography\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"responsive-typography\"\n    }}>{`Responsive Typography`}</h1>\n    <p>{`While there are many different approaches to styling responsive typography on the web,\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"/theming/#styles\"\n      }}><inlineCode parentName=\"a\">{`theme.styles`}</inlineCode></a>{` API can be used to create rich, responsive typography in MDX documents, with full control over the end result.\nUsed in combination with `}<a parentName=\"p\" {...{\n        \"href\": \"/sx-prop/#responsive-values\"\n      }}>{`responsive array values`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/variants\"\n      }}>{`variants`}</a>{`, you can create reusable typographic styles that don't pollute the global CSS scope.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme with responsive typography styles\n{\n  fontSizes: [\n    12, 14, 16, 18, 24, 32, 48, 64, 72,\n  ],\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: 'Poppins, sans-serif',\n  },\n  fontWeights: {\n    body: 400,\n    heading: 900,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  text: {\n    heading: {\n      fontFamily: 'heading',\n      fontWeight: 'heading',\n      lineHeight: 'heading',\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    p: {\n      fontSize: [2, 3],\n    },\n    h1: {\n      variant: 'text.heading',\n      fontSize: [5, 6, 7],\n    },\n    h2: {\n      variant: 'text.heading',\n      fontSize: [4, 5],\n    },\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"caveats\"\n    }}>{`Caveats`}</h2>\n    <p>{`Due to how CSS specificity works, if you've defined responsive styles in `}<inlineCode parentName=\"p\">{`theme.styles`}</inlineCode>{`,\noverriding styles with the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop requires also including styles for the `}<a parentName=\"p\" {...{\n        \"href\": \"/theming/#breakpoints\"\n      }}><inlineCode parentName=\"a\">{`breakpoints`}</inlineCode></a>{` set in the theme.\nFor example, with the following, the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` style will only apply at the smallest breakpoint, and the `}<inlineCode parentName=\"p\">{`theme.styles.h1`}</inlineCode>{` responsive styles will apply at other breakpoints.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// example theme\n{\n  styles: {\n    h1: {\n      fontSize: [ 4, 5, 6 ],\n    }\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Styled.h1\n  sx={{\n    // styles for larger breakpoints will still apply\n    // due to CSS specificity in media queries\n    fontSize: 3,\n  }}\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"non-mdx-content\"\n    }}>{`Non-MDX content`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/styled\"\n      }}><inlineCode parentName=\"a\">{`Styled`}</inlineCode></a>{` components can be used to pick up responsive styles outside of MDX,\nbut if you'd like to apply styles to other markdown or user generated content,\nyou can use the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop with a variant to style child elements.\nWhat this does is take the entire `}<inlineCode parentName=\"p\">{`theme.styles`}</inlineCode>{` object, adds a scoped classname to the `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`,\nand injects CSS with child selectors based on the keys in `}<inlineCode parentName=\"p\">{`theme.styles`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export default props => (\n  <div\n    sx={{\n      variant: 'styles',\n    }}>\n    {props.children}\n  </div>\n)\n`}</code></pre>\n    <p>{`Optionally, the `}<inlineCode parentName=\"p\">{`Styled.root`}</inlineCode>{` component can be used to set base styles within the `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export default props => (\n  <div\n    sx={{\n      variant: 'styles',\n    }}>\n    <Styled.root>{props.children}</Styled.root>\n  </div>\n)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}