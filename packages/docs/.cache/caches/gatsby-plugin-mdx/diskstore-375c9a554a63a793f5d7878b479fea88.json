{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-83967f5456ba32a961133c6b8db36734-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"TypeScript","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Theme UI is written in TypeScript.","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":35,"offset":49},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":35,"offset":49},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While most APIs in Theme UI should ","position":{"start":{"line":6,"column":1,"offset":51},"end":{"line":6,"column":36,"offset":86},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"just work","position":{"start":{"line":6,"column":37,"offset":87},"end":{"line":6,"column":46,"offset":96},"indent":[]}}],"position":{"start":{"line":6,"column":36,"offset":86},"end":{"line":6,"column":47,"offset":97},"indent":[]}},{"type":"text","value":" in TypeScript,\nthere are a few advanced use cases which will differ slightly.\nThis guide is intended to cover those use cases.","position":{"start":{"line":6,"column":47,"offset":97},"end":{"line":8,"column":49,"offset":224},"indent":[1,1]}}],"position":{"start":{"line":6,"column":1,"offset":51},"end":{"line":8,"column":49,"offset":224},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Exact theme type","position":{"start":{"line":10,"column":4,"offset":229},"end":{"line":10,"column":20,"offset":245},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":226},"end":{"line":10,"column":20,"offset":245},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":12,"column":1,"offset":247},"end":{"line":12,"column":5,"offset":251},"indent":[]}},{"type":"link","title":null,"url":"/theme-spec","children":[{"type":"inlineCode","value":"Theme","position":{"start":{"line":12,"column":6,"offset":252},"end":{"line":12,"column":13,"offset":259},"indent":[]}},{"type":"text","value":" type","position":{"start":{"line":12,"column":13,"offset":259},"end":{"line":12,"column":18,"offset":264},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":251},"end":{"line":12,"column":32,"offset":278},"indent":[]}},{"type":"text","value":" represents all possible themes.","position":{"start":{"line":12,"column":32,"offset":278},"end":{"line":12,"column":64,"offset":310},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":247},"end":{"line":12,"column":64,"offset":310},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It might be what you need when you're writing a library of reusable components\nor an app where the theme object is provided by the user and kept in the database.\nHowever, it's not the most convenient way to think about the theme,\nwhen building a blog or a landing page.","position":{"start":{"line":14,"column":1,"offset":312},"end":{"line":17,"column":40,"offset":581},"indent":[1,1,1]}}],"position":{"start":{"line":14,"column":1,"offset":312},"end":{"line":17,"column":40,"offset":581},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To know the exact type of your particular theme on type level,\nyou can use an identity \"constructor\" function to narrow the type.","position":{"start":{"line":19,"column":1,"offset":583},"end":{"line":20,"column":67,"offset":712},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":583},"end":{"line":20,"column":67,"offset":712},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"const makeTheme = <T extends Theme>(t: T) => t\n\nconst theme = makeTheme({\n  colors: {\n    background: 'white',\n    text: 'black',\n    blue: {\n      light: '#187abf',\n      dark: '#235a97',\n    },\n  },\n})\n\nexport type ExactTheme = typeof theme\n\n// No error\nconst lightBlue = theme.colors.blue.light","position":{"start":{"line":22,"column":1,"offset":714},"end":{"line":40,"column":4,"offset":1022},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can then reexport ","position":{"start":{"line":42,"column":1,"offset":1024},"end":{"line":42,"column":23,"offset":1046},"indent":[]}},{"type":"inlineCode","value":"useThemeUI","position":{"start":{"line":42,"column":23,"offset":1046},"end":{"line":42,"column":35,"offset":1058},"indent":[]}},{"type":"text","value":" hook with narrowed type.","position":{"start":{"line":42,"column":35,"offset":1058},"end":{"line":42,"column":60,"offset":1083},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1024},"end":{"line":42,"column":60,"offset":1083},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"import { ContextValue } from 'theme-ui'\n\ninterface ExactContextValue extends Omit<ContextValue, 'theme'> {\n  theme: ExactTheme\n}\n\nexport const useTheme = (useThemeUI as unknown) as () => ExactContextValue","position":{"start":{"line":44,"column":1,"offset":1085},"end":{"line":52,"column":4,"offset":1300},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://codesandbox.io/s/theme-ui-typescript-tips-yh8u1?file=/src/exact-theme-type.ts","children":[{"type":"text","value":"Try it on CodeSandbox.","position":{"start":{"line":54,"column":3,"offset":1304},"end":{"line":54,"column":25,"offset":1326},"indent":[]}}],"position":{"start":{"line":54,"column":2,"offset":1303},"end":{"line":54,"column":113,"offset":1414},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1302},"end":{"line":54,"column":114,"offset":1415},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1302},"end":{"line":54,"column":114,"offset":1415},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Accessing optional properties","position":{"start":{"line":56,"column":4,"offset":1420},"end":{"line":56,"column":33,"offset":1449},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1417},"end":{"line":56,"column":33,"offset":1449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Because all properties of ","position":{"start":{"line":58,"column":1,"offset":1451},"end":{"line":58,"column":27,"offset":1477},"indent":[]}},{"type":"inlineCode","value":"Theme","position":{"start":{"line":58,"column":27,"offset":1477},"end":{"line":58,"column":34,"offset":1484},"indent":[]}},{"type":"text","value":" are optional,\naccessing them requires usage of ","position":{"start":{"line":58,"column":34,"offset":1484},"end":{"line":59,"column":34,"offset":1532},"indent":[1]}},{"type":"link","title":null,"url":"/api#get","children":[{"type":"inlineCode","value":"get","position":{"start":{"line":59,"column":35,"offset":1533},"end":{"line":59,"column":40,"offset":1538},"indent":[]}},{"type":"text","value":" function","position":{"start":{"line":59,"column":40,"offset":1538},"end":{"line":59,"column":49,"offset":1547},"indent":[]}}],"position":{"start":{"line":59,"column":34,"offset":1532},"end":{"line":59,"column":60,"offset":1558},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":59,"column":60,"offset":1558},"end":{"line":59,"column":61,"offset":1559},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1451},"end":{"line":59,"column":61,"offset":1559},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { Theme } from 'theme-ui'\n\nconst theme: Theme = {\n  space: [0, 8, 16, 32, 64, 128, 256],\n  sizes: [0, 8, 16, 32, 64, 128, 256],\n}\n\n// Type error on `theme.space` and `theme.sizes`.\n// Object is possibly 'undefined'.ts(2532)\nreturn <div sx={{ size: (t) => t.space[3] + t.sizes[5] }} />","position":{"start":{"line":61,"column":1,"offset":1561},"end":{"line":72,"column":4,"offset":1863},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { Theme, get } from 'theme-ui'\n\n// No error\nreturn <div sx={{ size: (t) => get(t, 'space.3') + get(t, 'sizes.5') }} />","position":{"start":{"line":74,"column":1,"offset":1865},"end":{"line":79,"column":4,"offset":2001},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Properties of scales can be accessed with optional chaining.\nValues under numeric keys can be accessed with bracket notation.","position":{"start":{"line":81,"column":1,"offset":2003},"end":{"line":82,"column":65,"offset":2128},"indent":[1]}}],"position":{"start":{"line":81,"column":1,"offset":2003},"end":{"line":82,"column":65,"offset":2128},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"const parse = (x: unknown) => parseInt(String(x))\n\nreturn (\n  <div sx={{\n    size: size: (t) => parse(t.space?.[3]) + parse(t.sizes?.[5]) }}\n  />\n)","position":{"start":{"line":84,"column":1,"offset":2130},"end":{"line":92,"column":4,"offset":2288},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://codesandbox.io/s/theme-ui-typescript-tips-yh8u1?file=/src/App.tsx","children":[{"type":"text","value":"Try it on CodeSandbox.","position":{"start":{"line":94,"column":3,"offset":2292},"end":{"line":94,"column":25,"offset":2314},"indent":[]}}],"position":{"start":{"line":94,"column":2,"offset":2291},"end":{"line":94,"column":101,"offset":2390},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2290},"end":{"line":94,"column":102,"offset":2391},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2290},"end":{"line":94,"column":102,"offset":2391},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Additional properties in the theme","position":{"start":{"line":96,"column":4,"offset":2396},"end":{"line":96,"column":38,"offset":2430},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2393},"end":{"line":96,"column":38,"offset":2430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need additional properties in theme object,\nyou can add them with ","position":{"start":{"line":98,"column":1,"offset":2432},"end":{"line":99,"column":23,"offset":2505},"indent":[1]}},{"type":"link","title":null,"url":"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces","children":[{"type":"text","value":"declaration merging","position":{"start":{"line":99,"column":24,"offset":2506},"end":{"line":99,"column":43,"offset":2525},"indent":[]}}],"position":{"start":{"line":99,"column":23,"offset":2505},"end":{"line":99,"column":134,"offset":2616},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":99,"column":134,"offset":2616},"end":{"line":99,"column":135,"offset":2617},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2432},"end":{"line":99,"column":135,"offset":2617},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"interface MySyntaxHighlightingTheme {\n  foreground: string\n}\n\ndeclare module 'theme-ui' {\n  interface Theme {\n    syntaxHighlighting: MySyntaxHighlightingTheme\n  }\n}\n\nconst theme: Theme = {\n  syntaxHighlighting: {\n    foreground: '#222',\n  },\n}\n\nconst syntaxHighlighting = theme.syntaxHighlighting","position":{"start":{"line":101,"column":1,"offset":2619},"end":{"line":119,"column":4,"offset":2927},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://www.typescriptlang.org/v2/en/play?#code/JYWwDg9gTgLgBAbzgFQBYFMTrgXzgMyghDgHIYMsBaAV2FIG4AoJ4AOxnSnwEMBjbAFkAngGVhHHgA8AEsADmqADYLUMdvLSZsCJnALR08ojTYATAFxwAzjCgbmOFmfR8lPKNhAQzNJdnJKdFp6RD04dk5ufmwtLDD9fWsJGGk5RRVFdTZ5KxFxSVlVTLUNOPRwpycmPgg2WzgKbStyuABeBJsUtOLVbNzO-XxDYwhTSzIAYgAmWdIAGkqmHGYauobkwvTlPo12xqCAOk3UoozdnLX6+C4iKH2mrGPhGDYe86yNJiA","children":[{"type":"text","value":"Try it in TypeScript Playground.","position":{"start":{"line":121,"column":3,"offset":2931},"end":{"line":121,"column":35,"offset":2963},"indent":[]}}],"position":{"start":{"line":121,"column":2,"offset":2930},"end":{"line":121,"column":392,"offset":3320},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2929},"end":{"line":121,"column":393,"offset":3321},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2929},"end":{"line":121,"column":393,"offset":3321},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Common Problems","position":{"start":{"line":123,"column":4,"offset":3326},"end":{"line":123,"column":19,"offset":3341},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3323},"end":{"line":123,"column":19,"offset":3341},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Union types are not inferred without explicit annotation","position":{"start":{"line":125,"column":5,"offset":3347},"end":{"line":125,"column":61,"offset":3403},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3343},"end":{"line":125,"column":61,"offset":3403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Style objects defined outside of ","position":{"start":{"line":127,"column":1,"offset":3405},"end":{"line":127,"column":34,"offset":3438},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":127,"column":34,"offset":3438},"end":{"line":127,"column":39,"offset":3443},"indent":[]}},{"type":"text","value":" function and ","position":{"start":{"line":127,"column":39,"offset":3443},"end":{"line":127,"column":53,"offset":3457},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":127,"column":53,"offset":3457},"end":{"line":127,"column":57,"offset":3461},"indent":[]}},{"type":"text","value":" prop need explicit\nannotation to prevent following error.","position":{"start":{"line":127,"column":57,"offset":3461},"end":{"line":128,"column":39,"offset":3519},"indent":[1]}}],"position":{"start":{"line":127,"column":1,"offset":3405},"end":{"line":128,"column":39,"offset":3519},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"const style = { whiteSpace: 'pre-line' }\n\n// Type '{ whiteSpace: string; }' is not assignable to type 'ThemeUICSSObject'.\n// Type 'string' is not assignable to type '\"inherit\" | \"initial\" | \"revert\" | \"unset\" | \"normal\" | \"break-spaces\"\nreturn <div sx={style} />","position":{"start":{"line":130,"column":1,"offset":3521},"end":{"line":136,"column":4,"offset":3794},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://codesandbox.io/s/theme-ui-inferrence-too-wide-vkrf5?file=/src/index.tsx&view=editor&previewwindow=tests","children":[{"type":"text","value":"Try it on CodeSandbox.","position":{"start":{"line":138,"column":3,"offset":3798},"end":{"line":138,"column":25,"offset":3820},"indent":[]}}],"position":{"start":{"line":138,"column":2,"offset":3797},"end":{"line":138,"column":139,"offset":3934},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3796},"end":{"line":138,"column":140,"offset":3935},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3796},"end":{"line":138,"column":140,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"TypeScript assumes that ","position":{"start":{"line":140,"column":1,"offset":3937},"end":{"line":140,"column":25,"offset":3961},"indent":[]}},{"type":"inlineCode","value":"whiteSpace","position":{"start":{"line":140,"column":25,"offset":3961},"end":{"line":140,"column":37,"offset":3973},"indent":[]}},{"type":"text","value":" here is a ","position":{"start":{"line":140,"column":37,"offset":3973},"end":{"line":140,"column":48,"offset":3984},"indent":[]}},{"type":"inlineCode","value":"string","position":{"start":{"line":140,"column":48,"offset":3984},"end":{"line":140,"column":56,"offset":3992},"indent":[]}},{"type":"text","value":", but the ","position":{"start":{"line":140,"column":56,"offset":3992},"end":{"line":140,"column":66,"offset":4002},"indent":[]}},{"type":"inlineCode","value":"whiteSpace","position":{"start":{"line":140,"column":66,"offset":4002},"end":{"line":140,"column":78,"offset":4014},"indent":[]}},{"type":"text","value":"\nproperty in ","position":{"start":{"line":140,"column":78,"offset":4014},"end":{"line":141,"column":13,"offset":4027},"indent":[1]}},{"type":"inlineCode","value":"ThemeUICSSObject","position":{"start":{"line":141,"column":13,"offset":4027},"end":{"line":141,"column":31,"offset":4045},"indent":[]}},{"type":"text","value":" is a union of possible white-space values\n(","position":{"start":{"line":141,"column":31,"offset":4045},"end":{"line":142,"column":2,"offset":4089},"indent":[1]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space#Values","children":[{"type":"text","value":"see on MDN","position":{"start":{"line":142,"column":3,"offset":4090},"end":{"line":142,"column":13,"offset":4100},"indent":[]}}],"position":{"start":{"line":142,"column":2,"offset":4089},"end":{"line":142,"column":83,"offset":4170},"indent":[]}},{"type":"text","value":")\nor a nested style object.","position":{"start":{"line":142,"column":83,"offset":4170},"end":{"line":143,"column":26,"offset":4197},"indent":[1]}}],"position":{"start":{"line":140,"column":1,"offset":3937},"end":{"line":143,"column":26,"offset":4197},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can explicitly annotate ","position":{"start":{"line":145,"column":1,"offset":4199},"end":{"line":145,"column":28,"offset":4226},"indent":[]}},{"type":"inlineCode","value":"style","position":{"start":{"line":145,"column":28,"offset":4226},"end":{"line":145,"column":35,"offset":4233},"indent":[]}},{"type":"text","value":" ensure that it is a correct Theme UI style\nobject and that ","position":{"start":{"line":145,"column":35,"offset":4233},"end":{"line":146,"column":17,"offset":4293},"indent":[1]}},{"type":"inlineCode","value":"whiteSpace","position":{"start":{"line":146,"column":17,"offset":4293},"end":{"line":146,"column":29,"offset":4305},"indent":[]}},{"type":"text","value":" is one of appropriate values.","position":{"start":{"line":146,"column":29,"offset":4305},"end":{"line":146,"column":59,"offset":4335},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4199},"end":{"line":146,"column":59,"offset":4335},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { ThemeUICSSObject } from 'theme-ui'\n\nconst style: ThemeUICSSObject = { whiteSpace: 'pre-line' }\n\n// No error\nreturn <div sx={style} />","position":{"start":{"line":148,"column":1,"offset":4337},"end":{"line":155,"column":4,"offset":4490},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"link","title":null,"url":"https://codesandbox.io/s/theme-ui-inferrence-too-wide-vkrf5?file=/src/index.tsx&view=editor&previewwindow=tests","children":[{"type":"text","value":"Try it on CodeSandbox.","position":{"start":{"line":157,"column":3,"offset":4494},"end":{"line":157,"column":25,"offset":4516},"indent":[]}}],"position":{"start":{"line":157,"column":2,"offset":4493},"end":{"line":157,"column":139,"offset":4630},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4492},"end":{"line":157,"column":140,"offset":4631},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4492},"end":{"line":157,"column":140,"offset":4631},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We could also fix our problem by narrowing the type of ","position":{"start":{"line":159,"column":1,"offset":4633},"end":{"line":159,"column":56,"offset":4688},"indent":[]}},{"type":"inlineCode","value":"style","position":{"start":{"line":159,"column":56,"offset":4688},"end":{"line":159,"column":63,"offset":4695},"indent":[]}},{"type":"text","value":" with a\n","position":{"start":{"line":159,"column":63,"offset":4695},"end":{"line":160,"column":1,"offset":4703},"indent":[1]}},{"type":"link","title":null,"url":"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions","children":[{"type":"text","value":"const assertion","position":{"start":{"line":160,"column":2,"offset":4704},"end":{"line":160,"column":17,"offset":4719},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4703},"end":{"line":160,"column":115,"offset":4817},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":160,"column":115,"offset":4817},"end":{"line":160,"column":116,"offset":4818},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4633},"end":{"line":160,"column":116,"offset":4818},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"const style = { whiteSpace: 'pre-line' } as const","position":{"start":{"line":162,"column":1,"offset":4820},"end":{"line":164,"column":4,"offset":4880},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is succinct, but error prone, because we won't get TS intellisense support inside of this object.","position":{"start":{"line":166,"column":1,"offset":4882},"end":{"line":166,"column":103,"offset":4984},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4882},"end":{"line":166,"column":103,"offset":4984},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"TypeScript\"}","position":{"start":{"line":169,"column":1,"offset":4987},"end":{"line":169,"column":51,"offset":5037},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":169,"column":51,"offset":5037}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"TypeScript\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h1>\n    <p>{`Theme UI is written in TypeScript.`}</p>\n    <p>{`While most APIs in Theme UI should `}<em parentName=\"p\">{`just work`}</em>{` in TypeScript,\nthere are a few advanced use cases which will differ slightly.\nThis guide is intended to cover those use cases.`}</p>\n    <h2 {...{\n      \"id\": \"exact-theme-type\"\n    }}>{`Exact theme type`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/theme-spec\"\n      }}><inlineCode parentName=\"a\">{`Theme`}</inlineCode>{` type`}</a>{` represents all possible themes.`}</p>\n    <p>{`It might be what you need when you're writing a library of reusable components\nor an app where the theme object is provided by the user and kept in the database.\nHowever, it's not the most convenient way to think about the theme,\nwhen building a blog or a landing page.`}</p>\n    <p>{`To know the exact type of your particular theme on type level,\nyou can use an identity \"constructor\" function to narrow the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const makeTheme = <T extends Theme>(t: T) => t\n\nconst theme = makeTheme({\n  colors: {\n    background: 'white',\n    text: 'black',\n    blue: {\n      light: '#187abf',\n      dark: '#235a97',\n    },\n  },\n})\n\nexport type ExactTheme = typeof theme\n\n// No error\nconst lightBlue = theme.colors.blue.light\n`}</code></pre>\n    <p>{`You can then reexport `}<inlineCode parentName=\"p\">{`useThemeUI`}</inlineCode>{` hook with narrowed type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ContextValue } from 'theme-ui'\n\ninterface ExactContextValue extends Omit<ContextValue, 'theme'> {\n  theme: ExactTheme\n}\n\nexport const useTheme = (useThemeUI as unknown) as () => ExactContextValue\n`}</code></pre>\n    <p><em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://codesandbox.io/s/theme-ui-typescript-tips-yh8u1?file=/src/exact-theme-type.ts\"\n        }}>{`Try it on CodeSandbox.`}</a></em></p>\n    <h2 {...{\n      \"id\": \"accessing-optional-properties\"\n    }}>{`Accessing optional properties`}</h2>\n    <p>{`Because all properties of `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{` are optional,\naccessing them requires usage of `}<a parentName=\"p\" {...{\n        \"href\": \"/api#get\"\n      }}><inlineCode parentName=\"a\">{`get`}</inlineCode>{` function`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Theme } from 'theme-ui'\n\nconst theme: Theme = {\n  space: [0, 8, 16, 32, 64, 128, 256],\n  sizes: [0, 8, 16, 32, 64, 128, 256],\n}\n\n// Type error on \\`theme.space\\` and \\`theme.sizes\\`.\n// Object is possibly 'undefined'.ts(2532)\nreturn <div sx={{ size: (t) => t.space[3] + t.sizes[5] }} />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Theme, get } from 'theme-ui'\n\n// No error\nreturn <div sx={{ size: (t) => get(t, 'space.3') + get(t, 'sizes.5') }} />\n`}</code></pre>\n    <p>{`Properties of scales can be accessed with optional chaining.\nValues under numeric keys can be accessed with bracket notation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const parse = (x: unknown) => parseInt(String(x))\n\nreturn (\n  <div sx={{\n    size: size: (t) => parse(t.space?.[3]) + parse(t.sizes?.[5]) }}\n  />\n)\n`}</code></pre>\n    <p><em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://codesandbox.io/s/theme-ui-typescript-tips-yh8u1?file=/src/App.tsx\"\n        }}>{`Try it on CodeSandbox.`}</a></em></p>\n    <h2 {...{\n      \"id\": \"additional-properties-in-the-theme\"\n    }}>{`Additional properties in the theme`}</h2>\n    <p>{`If you need additional properties in theme object,\nyou can add them with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces\"\n      }}>{`declaration merging`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface MySyntaxHighlightingTheme {\n  foreground: string\n}\n\ndeclare module 'theme-ui' {\n  interface Theme {\n    syntaxHighlighting: MySyntaxHighlightingTheme\n  }\n}\n\nconst theme: Theme = {\n  syntaxHighlighting: {\n    foreground: '#222',\n  },\n}\n\nconst syntaxHighlighting = theme.syntaxHighlighting\n`}</code></pre>\n    <p><em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://www.typescriptlang.org/v2/en/play?#code/JYWwDg9gTgLgBAbzgFQBYFMTrgXzgMyghDgHIYMsBaAV2FIG4AoJ4AOxnSnwEMBjbAFkAngGVhHHgA8AEsADmqADYLUMdvLSZsCJnALR08ojTYATAFxwAzjCgbmOFmfR8lPKNhAQzNJdnJKdFp6RD04dk5ufmwtLDD9fWsJGGk5RRVFdTZ5KxFxSVlVTLUNOPRwpycmPgg2WzgKbStyuABeBJsUtOLVbNzO-XxDYwhTSzIAYgAmWdIAGkqmHGYauobkwvTlPo12xqCAOk3UoozdnLX6+C4iKH2mrGPhGDYe86yNJiA\"\n        }}>{`Try it in TypeScript Playground.`}</a></em></p>\n    <h2 {...{\n      \"id\": \"common-problems\"\n    }}>{`Common Problems`}</h2>\n    <h3 {...{\n      \"id\": \"union-types-are-not-inferred-without-explicit-annotation\"\n    }}>{`Union types are not inferred without explicit annotation`}</h3>\n    <p>{`Style objects defined outside of `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` function and `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop need explicit\nannotation to prevent following error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const style = { whiteSpace: 'pre-line' }\n\n// Type '{ whiteSpace: string; }' is not assignable to type 'ThemeUICSSObject'.\n// Type 'string' is not assignable to type '\"inherit\" | \"initial\" | \"revert\" | \"unset\" | \"normal\" | \"break-spaces\"\nreturn <div sx={style} />\n`}</code></pre>\n    <p><em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://codesandbox.io/s/theme-ui-inferrence-too-wide-vkrf5?file=/src/index.tsx&view=editor&previewwindow=tests\"\n        }}>{`Try it on CodeSandbox.`}</a></em></p>\n    <p>{`TypeScript assumes that `}<inlineCode parentName=\"p\">{`whiteSpace`}</inlineCode>{` here is a `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`, but the `}<inlineCode parentName=\"p\">{`whiteSpace`}</inlineCode>{`\nproperty in `}<inlineCode parentName=\"p\">{`ThemeUICSSObject`}</inlineCode>{` is a union of possible white-space values\n(`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space#Values\"\n      }}>{`see on MDN`}</a>{`)\nor a nested style object.`}</p>\n    <p>{`We can explicitly annotate `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` ensure that it is a correct Theme UI style\nobject and that `}<inlineCode parentName=\"p\">{`whiteSpace`}</inlineCode>{` is one of appropriate values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ThemeUICSSObject } from 'theme-ui'\n\nconst style: ThemeUICSSObject = { whiteSpace: 'pre-line' }\n\n// No error\nreturn <div sx={style} />\n`}</code></pre>\n    <p><em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://codesandbox.io/s/theme-ui-inferrence-too-wide-vkrf5?file=/src/index.tsx&view=editor&previewwindow=tests\"\n        }}>{`Try it on CodeSandbox.`}</a></em></p>\n    <p>{`We could also fix our problem by narrowing the type of `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` with a\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions\"\n      }}>{`const assertion`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const style = { whiteSpace: 'pre-line' } as const\n`}</code></pre>\n    <p>{`This is succinct, but error prone, because we won't get TS intellisense support inside of this object.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}