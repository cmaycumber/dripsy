{"expireTime":9007200854949531000,"key":"gatsby-plugin-mdx-entire-payload-bd74b148411734584af5fb54c4504957-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Motivation","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One of the primary motivations behind Theme UI is to make building themeable, constraint-based user interfaces in React as simple and as interoperable as possible.\nThis library builds upon years of work on various libraries, including ","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":5,"column":72,"offset":250},"indent":[1]}},{"type":"linkReference","identifier":"basscss","label":"Basscss","referenceType":"collapsed","children":[{"type":"text","value":"Basscss","position":{"start":{"line":5,"column":73,"offset":251},"end":{"line":5,"column":80,"offset":258},"indent":[]}}],"position":{"start":{"line":5,"column":72,"offset":250},"end":{"line":5,"column":83,"offset":261},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":5,"column":83,"offset":261},"end":{"line":5,"column":85,"offset":263},"indent":[]}},{"type":"linkReference","identifier":"tachyons","label":"Tachyons","referenceType":"collapsed","children":[{"type":"text","value":"Tachyons","position":{"start":{"line":5,"column":86,"offset":264},"end":{"line":5,"column":94,"offset":272},"indent":[]}}],"position":{"start":{"line":5,"column":85,"offset":263},"end":{"line":5,"column":97,"offset":275},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":5,"column":97,"offset":275},"end":{"line":5,"column":99,"offset":277},"indent":[]}},{"type":"linkReference","identifier":"rebass","label":"Rebass","referenceType":"collapsed","children":[{"type":"text","value":"Rebass","position":{"start":{"line":5,"column":100,"offset":278},"end":{"line":5,"column":106,"offset":284},"indent":[]}}],"position":{"start":{"line":5,"column":99,"offset":277},"end":{"line":5,"column":109,"offset":287},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":5,"column":109,"offset":287},"end":{"line":5,"column":111,"offset":289},"indent":[]}},{"type":"linkReference","identifier":"styled system","label":"Styled System","referenceType":"collapsed","children":[{"type":"text","value":"Styled System","position":{"start":{"line":5,"column":112,"offset":290},"end":{"line":5,"column":125,"offset":303},"indent":[]}}],"position":{"start":{"line":5,"column":111,"offset":289},"end":{"line":5,"column":128,"offset":306},"indent":[]}},{"type":"text","value":", and various other internal style guides and design systems.\nWhile some of the ideas encapsulated within this library may seem familiar, the intent here is to combine modern CSS tooling into a single \"mini-framework\" with good guidance on how to fall into the pit of success for creating white-label products, themed component libraries, and even full websites.","position":{"start":{"line":5,"column":128,"offset":306},"end":{"line":6,"column":301,"offset":668},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":6,"column":301,"offset":668},"indent":[1,1]}},{"type":"definition","identifier":"basscss","label":"basscss","title":null,"url":"https://github.com/basscss/basscss","position":{"start":{"line":8,"column":1,"offset":670},"end":{"line":8,"column":46,"offset":715},"indent":[]}},{"type":"definition","identifier":"tachyons","label":"tachyons","title":null,"url":"https://tachyons.io","position":{"start":{"line":9,"column":1,"offset":716},"end":{"line":9,"column":32,"offset":747},"indent":[]}},{"type":"definition","identifier":"rebass","label":"rebass","title":null,"url":"https://rebassjs.org","position":{"start":{"line":10,"column":1,"offset":748},"end":{"line":10,"column":31,"offset":778},"indent":[]}},{"type":"definition","identifier":"styled system","label":"styled system","title":null,"url":"https://styled-system.com","position":{"start":{"line":11,"column":1,"offset":779},"end":{"line":11,"column":43,"offset":821},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MDX","position":{"start":{"line":13,"column":4,"offset":826},"end":{"line":13,"column":7,"offset":829},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":823},"end":{"line":13,"column":7,"offset":829},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"MDX has, in my opinion, quickly become one of the best ways to render Markdown in React.\nThe ability to render custom React components for any Markdown element with the ","position":{"start":{"line":15,"column":1,"offset":831},"end":{"line":16,"column":81,"offset":1000},"indent":[1]}},{"type":"inlineCode","value":"MDXProvider","position":{"start":{"line":16,"column":81,"offset":1000},"end":{"line":16,"column":94,"offset":1013},"indent":[]}},{"type":"text","value":" is a very powerful API and has the potential to open up how Markdown is leveraged in ways I think we'll continue to see evolve over the coming years.","position":{"start":{"line":16,"column":94,"offset":1013},"end":{"line":16,"column":244,"offset":1163},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":831},"end":{"line":16,"column":244,"offset":1163},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"While the final rendered HTML ","position":{"start":{"line":18,"column":1,"offset":1165},"end":{"line":18,"column":31,"offset":1195},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"can","position":{"start":{"line":18,"column":32,"offset":1196},"end":{"line":18,"column":35,"offset":1199},"indent":[]}}],"position":{"start":{"line":18,"column":31,"offset":1195},"end":{"line":18,"column":36,"offset":1200},"indent":[]}},{"type":"text","value":" be styled using global CSS or a wrapping element with child selectors, there are certainly drawbacks to this approach,\nand they can lead to unexpected styling bugs when composing themes together.\nUsing the ","position":{"start":{"line":18,"column":36,"offset":1200},"end":{"line":20,"column":11,"offset":1407},"indent":[1,1]}},{"type":"inlineCode","value":"MDXProvider","position":{"start":{"line":20,"column":11,"offset":1407},"end":{"line":20,"column":24,"offset":1420},"indent":[]}},{"type":"text","value":" to render custom styled components in MDX is a great way to avoid this, but the overhead for applying styles in this way can be a lot of work, even with UI component libraries like Rebass or Material UI.\nTheme UI includes the ","position":{"start":{"line":20,"column":24,"offset":1420},"end":{"line":21,"column":23,"offset":1647},"indent":[1]}},{"type":"inlineCode","value":"theme.styles","position":{"start":{"line":21,"column":23,"offset":1647},"end":{"line":21,"column":37,"offset":1661},"indent":[]}},{"type":"text","value":" API as a light abstraction on top of this, that hopefully feels familiar to people from diverse backgrounds, even those with little or no experience using MDX.","position":{"start":{"line":21,"column":37,"offset":1661},"end":{"line":21,"column":197,"offset":1821},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1165},"end":{"line":21,"column":197,"offset":1821},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For examples of previous explorations into this idea, see ","position":{"start":{"line":23,"column":1,"offset":1823},"end":{"line":23,"column":59,"offset":1881},"indent":[]}},{"type":"linkReference","identifier":"rebass mdx","label":"Rebass MDX","referenceType":"collapsed","children":[{"type":"text","value":"Rebass MDX","position":{"start":{"line":23,"column":60,"offset":1882},"end":{"line":23,"column":70,"offset":1892},"indent":[]}}],"position":{"start":{"line":23,"column":59,"offset":1881},"end":{"line":23,"column":73,"offset":1895},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":23,"column":73,"offset":1895},"end":{"line":23,"column":75,"offset":1897},"indent":[]}},{"type":"linkReference","identifier":"mdx style","label":"MDX Style","referenceType":"collapsed","children":[{"type":"text","value":"MDX Style","position":{"start":{"line":23,"column":76,"offset":1898},"end":{"line":23,"column":85,"offset":1907},"indent":[]}}],"position":{"start":{"line":23,"column":75,"offset":1897},"end":{"line":23,"column":88,"offset":1910},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":23,"column":88,"offset":1910},"end":{"line":23,"column":94,"offset":1916},"indent":[]}},{"type":"linkReference","identifier":"mdx blocks","label":"MDX Blocks","referenceType":"collapsed","children":[{"type":"text","value":"MDX Blocks","position":{"start":{"line":23,"column":95,"offset":1917},"end":{"line":23,"column":105,"offset":1927},"indent":[]}}],"position":{"start":{"line":23,"column":94,"offset":1916},"end":{"line":23,"column":108,"offset":1930},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":23,"column":108,"offset":1930},"end":{"line":23,"column":109,"offset":1931},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1823},"end":{"line":23,"column":109,"offset":1931},"indent":[]}},{"type":"definition","identifier":"rebass mdx","label":"rebass mdx","title":null,"url":"https://github.com/rebassjs/mdx","position":{"start":{"line":25,"column":1,"offset":1933},"end":{"line":25,"column":46,"offset":1978},"indent":[]}},{"type":"definition","identifier":"mdx style","label":"mdx style","title":null,"url":"https://github.com/jxnblk/mdx-style","position":{"start":{"line":26,"column":1,"offset":1979},"end":{"line":26,"column":49,"offset":2027},"indent":[]}},{"type":"definition","identifier":"mdx blocks","label":"mdx blocks","title":null,"url":"https://github.com/jxnblk/mdx-blocks","position":{"start":{"line":27,"column":1,"offset":2028},"end":{"line":27,"column":51,"offset":2078},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The ","position":{"start":{"line":29,"column":4,"offset":2083},"end":{"line":29,"column":8,"offset":2087},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":29,"column":8,"offset":2087},"end":{"line":29,"column":13,"offset":2092},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":29,"column":13,"offset":2092},"end":{"line":29,"column":18,"offset":2097},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":29,"column":18,"offset":2097},"end":{"line":29,"column":22,"offset":2101},"indent":[]}},{"type":"text","value":" Props","position":{"start":{"line":29,"column":22,"offset":2101},"end":{"line":29,"column":28,"offset":2107},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2080},"end":{"line":29,"column":28,"offset":2107},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":31,"column":1,"offset":2109},"end":{"line":31,"column":5,"offset":2113},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":31,"column":5,"offset":2113},"end":{"line":31,"column":10,"offset":2118},"indent":[]}},{"type":"text","value":" prop is a powerful pattern for styling UI in React.\nIt works like the built-in ","position":{"start":{"line":31,"column":10,"offset":2118},"end":{"line":32,"column":28,"offset":2198},"indent":[1]}},{"type":"inlineCode","value":"style","position":{"start":{"line":32,"column":28,"offset":2198},"end":{"line":32,"column":35,"offset":2205},"indent":[]}},{"type":"text","value":" prop, but it includes some of the best parts of the CSS language, including media queries and pseudo-classes, and can be authored in native JavaScript object literal syntax.\nThe ","position":{"start":{"line":32,"column":35,"offset":2205},"end":{"line":33,"column":5,"offset":2384},"indent":[1]}},{"type":"inlineCode","value":"css","position":{"start":{"line":33,"column":5,"offset":2384},"end":{"line":33,"column":10,"offset":2389},"indent":[]}},{"type":"text","value":" prop can be leveraged in a similar way to the ","position":{"start":{"line":33,"column":10,"offset":2389},"end":{"line":33,"column":57,"offset":2436},"indent":[]}},{"type":"inlineCode","value":"styled","position":{"start":{"line":33,"column":57,"offset":2436},"end":{"line":33,"column":65,"offset":2444},"indent":[]}},{"type":"text","value":" higher-order component, but also offers more flexibility when making one-off, context-specific stylistic changes.\nThe ","position":{"start":{"line":33,"column":65,"offset":2444},"end":{"line":34,"column":5,"offset":2563},"indent":[1]}},{"type":"inlineCode","value":"css","position":{"start":{"line":34,"column":5,"offset":2563},"end":{"line":34,"column":10,"offset":2568},"indent":[]}},{"type":"text","value":" prop also avoids some of the ","position":{"start":{"line":34,"column":10,"offset":2568},"end":{"line":34,"column":40,"offset":2598},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/styled-components/styled-components/issues/439","children":[{"type":"text","value":"pitfalls of mixing CSS properties with HTML attributes","position":{"start":{"line":34,"column":41,"offset":2599},"end":{"line":34,"column":95,"offset":2653},"indent":[]}}],"position":{"start":{"line":34,"column":40,"offset":2598},"end":{"line":34,"column":163,"offset":2721},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":34,"column":163,"offset":2721},"end":{"line":34,"column":164,"offset":2722},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2109},"end":{"line":34,"column":164,"offset":2722},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":36,"column":1,"offset":2724},"end":{"line":36,"column":5,"offset":2728},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":36,"column":5,"offset":2728},"end":{"line":36,"column":9,"offset":2732},"indent":[]}},{"type":"text","value":" prop is a light abstraction on top of the ","position":{"start":{"line":36,"column":9,"offset":2732},"end":{"line":36,"column":52,"offset":2775},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":36,"column":52,"offset":2775},"end":{"line":36,"column":57,"offset":2780},"indent":[]}},{"type":"text","value":" prop that can serve as a complete replacement and makes it easier to\nensure you use values from your global ","position":{"start":{"line":36,"column":57,"offset":2780},"end":{"line":37,"column":40,"offset":2889},"indent":[1]}},{"type":"inlineCode","value":"theme","position":{"start":{"line":37,"column":40,"offset":2889},"end":{"line":37,"column":47,"offset":2896},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":37,"column":47,"offset":2896},"end":{"line":37,"column":55,"offset":2904},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2724},"end":{"line":37,"column":55,"offset":2904},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why Object Literal Syntax","position":{"start":{"line":39,"column":4,"offset":2909},"end":{"line":39,"column":29,"offset":2934},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2906},"end":{"line":39,"column":29,"offset":2934},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For many, the choice between using object literal syntax for styles versus tagged template literals comes down to personal preference, but in the case of Theme UI, there are some fundamental reasons for using native JavaScript types for styles.","position":{"start":{"line":41,"column":1,"offset":2936},"end":{"line":41,"column":245,"offset":3180},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2936},"end":{"line":41,"column":245,"offset":3180},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":43,"column":1,"offset":3182},"end":{"line":43,"column":5,"offset":3186},"indent":[]}},{"type":"inlineCode","value":"theme","position":{"start":{"line":43,"column":5,"offset":3186},"end":{"line":43,"column":12,"offset":3193},"indent":[]}},{"type":"text","value":" object itself is an object, and keeping styles in a similar format helps reduce the API surface area.\nUsing and parsing strings that represent embedded DSLs introduces overhead when mapping over key-value pairs.\nTheme UI avoids this overhead for reasons related to performance, testing, and overall bundle size.\nFor some of the ","position":{"start":{"line":43,"column":12,"offset":3193},"end":{"line":46,"column":17,"offset":3522},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://facebook.github.io/jsx/","children":[{"type":"text","value":"same reasons","position":{"start":{"line":46,"column":18,"offset":3523},"end":{"line":46,"column":30,"offset":3535},"indent":[]}}],"position":{"start":{"line":46,"column":17,"offset":3522},"end":{"line":46,"column":64,"offset":3569},"indent":[]}},{"type":"text","value":" that React itself uses JSX (i.e. function calls) instead of tagged template literals, Theme UI only includes support for authoring CSS with object literal syntax.\nAdditionally, using native JavaScript types has many other benefits that are outside of the scope of this document.","position":{"start":{"line":46,"column":64,"offset":3569},"end":{"line":47,"column":116,"offset":3848},"indent":[1]}}],"position":{"start":{"line":43,"column":1,"offset":3182},"end":{"line":47,"column":116,"offset":3848},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why Emotion","position":{"start":{"line":49,"column":4,"offset":3853},"end":{"line":49,"column":15,"offset":3864},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":3850},"end":{"line":49,"column":15,"offset":3864},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While there are many different solutions to handling CSS in JavaScript, Styled Components and Emotion have become the most widely-used industry-standard libraries.\nIf you're building a custom component library, either Styled Components or Emotion should suit your needs just fine.","position":{"start":{"line":51,"column":1,"offset":3866},"end":{"line":52,"column":117,"offset":4146},"indent":[1]}}],"position":{"start":{"line":51,"column":1,"offset":3866},"end":{"line":52,"column":117,"offset":4146},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For Theme UI, the decision was primarily based on these factors:","position":{"start":{"line":54,"column":1,"offset":4148},"end":{"line":54,"column":65,"offset":4212},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":4148},"end":{"line":54,"column":65,"offset":4212},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Emotion's implementation of the ","position":{"start":{"line":56,"column":3,"offset":4216},"end":{"line":56,"column":35,"offset":4248},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":56,"column":35,"offset":4248},"end":{"line":56,"column":40,"offset":4253},"indent":[]}},{"type":"text","value":" prop and the custom JSX pragma allows for better integration with Theme UI's ","position":{"start":{"line":56,"column":40,"offset":4253},"end":{"line":56,"column":118,"offset":4331},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":56,"column":118,"offset":4331},"end":{"line":56,"column":122,"offset":4335},"indent":[]}},{"type":"text","value":" prop","position":{"start":{"line":56,"column":122,"offset":4335},"end":{"line":56,"column":127,"offset":4340},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":4216},"end":{"line":56,"column":127,"offset":4340},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":4214},"end":{"line":56,"column":127,"offset":4340},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Emotion API includes more lower-level utilities, like ","position":{"start":{"line":57,"column":3,"offset":4343},"end":{"line":57,"column":61,"offset":4401},"indent":[]}},{"type":"inlineCode","value":"createEmotion","position":{"start":{"line":57,"column":61,"offset":4401},"end":{"line":57,"column":76,"offset":4416},"indent":[]}},{"type":"text","value":" that could be leveraged when considering how multiple themes could be composed together","position":{"start":{"line":57,"column":76,"offset":4416},"end":{"line":57,"column":164,"offset":4504},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":4343},"end":{"line":57,"column":164,"offset":4504},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":4341},"end":{"line":57,"column":164,"offset":4504},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Emotion's theming context is directly available in ","position":{"start":{"line":58,"column":3,"offset":4507},"end":{"line":58,"column":54,"offset":4558},"indent":[]}},{"type":"inlineCode","value":"@emotion/core","position":{"start":{"line":58,"column":54,"offset":4558},"end":{"line":58,"column":69,"offset":4573},"indent":[]}},{"type":"text","value":", allowing this library to leverage React's context API in different ways","position":{"start":{"line":58,"column":69,"offset":4573},"end":{"line":58,"column":142,"offset":4646},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":4507},"end":{"line":58,"column":142,"offset":4646},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":4505},"end":{"line":58,"column":142,"offset":4646},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In the case of Theme UI internals, the ","position":{"start":{"line":59,"column":3,"offset":4649},"end":{"line":59,"column":42,"offset":4688},"indent":[]}},{"type":"inlineCode","value":"styled","position":{"start":{"line":59,"column":42,"offset":4688},"end":{"line":59,"column":50,"offset":4696},"indent":[]}},{"type":"text","value":" higher-order component utility is not necessarily the best API for creating components,\nand by not including ","position":{"start":{"line":59,"column":50,"offset":4696},"end":{"line":60,"column":24,"offset":4808},"indent":[3]}},{"type":"inlineCode","value":"@emotion/styled","position":{"start":{"line":60,"column":24,"offset":4808},"end":{"line":60,"column":41,"offset":4825},"indent":[]}},{"type":"text","value":" in the core package the bundle size is kept to a minimum – i.e. most of the same things can be achieved with the ","position":{"start":{"line":60,"column":41,"offset":4825},"end":{"line":60,"column":155,"offset":4939},"indent":[]}},{"type":"inlineCode","value":"css","position":{"start":{"line":60,"column":155,"offset":4939},"end":{"line":60,"column":160,"offset":4944},"indent":[]}},{"type":"text","value":" prop","position":{"start":{"line":60,"column":160,"offset":4944},"end":{"line":60,"column":165,"offset":4949},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":4649},"end":{"line":60,"column":165,"offset":4949},"indent":[3]}}],"position":{"start":{"line":59,"column":1,"offset":4647},"end":{"line":60,"column":165,"offset":4949},"indent":[1]}}],"position":{"start":{"line":56,"column":1,"offset":4214},"end":{"line":60,"column":165,"offset":4949},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How is this different from Styled System","position":{"start":{"line":62,"column":4,"offset":4954},"end":{"line":62,"column":44,"offset":4994},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":4951},"end":{"line":62,"column":44,"offset":4994},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Theme UI's ","position":{"start":{"line":64,"column":1,"offset":4996},"end":{"line":64,"column":12,"offset":5007},"indent":[]}},{"type":"inlineCode","value":"sx","position":{"start":{"line":64,"column":12,"offset":5007},"end":{"line":64,"column":16,"offset":5011},"indent":[]}},{"type":"text","value":" prop was inspired by Styled System, and it uses the same theme spec that Styled System adheres to. Styled System is a much lower-level API that is not in any way coupled to React or Emotion.\nFor example, Styled System works with Node.js, Vuejs, Svelte, and many other libraries.\nTheme UI is intended to be a higher-level abstraction specifically for use in React applications and includes features that will not likely be added to the core Styled System library.","position":{"start":{"line":64,"column":16,"offset":5011},"end":{"line":66,"column":184,"offset":5474},"indent":[1,1]}}],"position":{"start":{"line":64,"column":1,"offset":4996},"end":{"line":66,"column":184,"offset":5474},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Motivation\"}","position":{"start":{"line":69,"column":1,"offset":5477},"end":{"line":69,"column":51,"offset":5527},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":69,"column":51,"offset":5527}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Motivation\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"motivation\"\n    }}>{`Motivation`}</h1>\n    <p>{`One of the primary motivations behind Theme UI is to make building themeable, constraint-based user interfaces in React as simple and as interoperable as possible.\nThis library builds upon years of work on various libraries, including `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/basscss/basscss\"\n      }}>{`Basscss`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://tachyons.io\"\n      }}>{`Tachyons`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://rebassjs.org\"\n      }}>{`Rebass`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://styled-system.com\"\n      }}>{`Styled System`}</a>{`, and various other internal style guides and design systems.\nWhile some of the ideas encapsulated within this library may seem familiar, the intent here is to combine modern CSS tooling into a single \"mini-framework\" with good guidance on how to fall into the pit of success for creating white-label products, themed component libraries, and even full websites.`}</p>\n    <h2 {...{\n      \"id\": \"mdx\"\n    }}>{`MDX`}</h2>\n    <p>{`MDX has, in my opinion, quickly become one of the best ways to render Markdown in React.\nThe ability to render custom React components for any Markdown element with the `}<inlineCode parentName=\"p\">{`MDXProvider`}</inlineCode>{` is a very powerful API and has the potential to open up how Markdown is leveraged in ways I think we'll continue to see evolve over the coming years.`}</p>\n    <p>{`While the final rendered HTML `}<em parentName=\"p\">{`can`}</em>{` be styled using global CSS or a wrapping element with child selectors, there are certainly drawbacks to this approach,\nand they can lead to unexpected styling bugs when composing themes together.\nUsing the `}<inlineCode parentName=\"p\">{`MDXProvider`}</inlineCode>{` to render custom styled components in MDX is a great way to avoid this, but the overhead for applying styles in this way can be a lot of work, even with UI component libraries like Rebass or Material UI.\nTheme UI includes the `}<inlineCode parentName=\"p\">{`theme.styles`}</inlineCode>{` API as a light abstraction on top of this, that hopefully feels familiar to people from diverse backgrounds, even those with little or no experience using MDX.`}</p>\n    <p>{`For examples of previous explorations into this idea, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rebassjs/mdx\"\n      }}>{`Rebass MDX`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jxnblk/mdx-style\"\n      }}>{`MDX Style`}</a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jxnblk/mdx-blocks\"\n      }}>{`MDX Blocks`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"the-css-and-sx-props\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`css`}</inlineCode>{` and `}<inlineCode parentName=\"h2\">{`sx`}</inlineCode>{` Props`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` prop is a powerful pattern for styling UI in React.\nIt works like the built-in `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` prop, but it includes some of the best parts of the CSS language, including media queries and pseudo-classes, and can be authored in native JavaScript object literal syntax.\nThe `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` prop can be leveraged in a similar way to the `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` higher-order component, but also offers more flexibility when making one-off, context-specific stylistic changes.\nThe `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` prop also avoids some of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/styled-components/styled-components/issues/439\"\n      }}>{`pitfalls of mixing CSS properties with HTML attributes`}</a>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop is a light abstraction on top of the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` prop that can serve as a complete replacement and makes it easier to\nensure you use values from your global `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` object.`}</p>\n    <h2 {...{\n      \"id\": \"why-object-literal-syntax\"\n    }}>{`Why Object Literal Syntax`}</h2>\n    <p>{`For many, the choice between using object literal syntax for styles versus tagged template literals comes down to personal preference, but in the case of Theme UI, there are some fundamental reasons for using native JavaScript types for styles.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` object itself is an object, and keeping styles in a similar format helps reduce the API surface area.\nUsing and parsing strings that represent embedded DSLs introduces overhead when mapping over key-value pairs.\nTheme UI avoids this overhead for reasons related to performance, testing, and overall bundle size.\nFor some of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/jsx/\"\n      }}>{`same reasons`}</a>{` that React itself uses JSX (i.e. function calls) instead of tagged template literals, Theme UI only includes support for authoring CSS with object literal syntax.\nAdditionally, using native JavaScript types has many other benefits that are outside of the scope of this document.`}</p>\n    <h2 {...{\n      \"id\": \"why-emotion\"\n    }}>{`Why Emotion`}</h2>\n    <p>{`While there are many different solutions to handling CSS in JavaScript, Styled Components and Emotion have become the most widely-used industry-standard libraries.\nIf you're building a custom component library, either Styled Components or Emotion should suit your needs just fine.`}</p>\n    <p>{`For Theme UI, the decision was primarily based on these factors:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Emotion's implementation of the `}<inlineCode parentName=\"li\">{`css`}</inlineCode>{` prop and the custom JSX pragma allows for better integration with Theme UI's `}<inlineCode parentName=\"li\">{`sx`}</inlineCode>{` prop`}</li>\n      <li parentName=\"ul\">{`The Emotion API includes more lower-level utilities, like `}<inlineCode parentName=\"li\">{`createEmotion`}</inlineCode>{` that could be leveraged when considering how multiple themes could be composed together`}</li>\n      <li parentName=\"ul\">{`Emotion's theming context is directly available in `}<inlineCode parentName=\"li\">{`@emotion/core`}</inlineCode>{`, allowing this library to leverage React's context API in different ways`}</li>\n      <li parentName=\"ul\">{`In the case of Theme UI internals, the `}<inlineCode parentName=\"li\">{`styled`}</inlineCode>{` higher-order component utility is not necessarily the best API for creating components,\nand by not including `}<inlineCode parentName=\"li\">{`@emotion/styled`}</inlineCode>{` in the core package the bundle size is kept to a minimum – i.e. most of the same things can be achieved with the `}<inlineCode parentName=\"li\">{`css`}</inlineCode>{` prop`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-is-this-different-from-styled-system\"\n    }}>{`How is this different from Styled System`}</h2>\n    <p>{`Theme UI's `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop was inspired by Styled System, and it uses the same theme spec that Styled System adheres to. Styled System is a much lower-level API that is not in any way coupled to React or Emotion.\nFor example, Styled System works with Node.js, Vuejs, Svelte, and many other libraries.\nTheme UI is intended to be a higher-level abstraction specifically for use in React applications and includes features that will not likely be added to the core Styled System library.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}